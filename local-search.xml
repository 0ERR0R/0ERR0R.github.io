<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>武威一中高考加油视频征集</title>
    <link href="/2020/12/74e668b6.html"/>
    <url>/2020/12/74e668b6.html</url>
    
    <content type="html"><![CDATA[<h1 id="主题内容"><a href="#主题内容" class="headerlink" title="主题内容"></a>主题内容</h1><p>各位武威一中毕业的优秀学子们，大家好！</p><p>我是武威一中2020年毕业的一名学生，2020年对我们这一届学生来说，是极不平凡的一年（尤其是上半年），由于疫情的原因，我们不得不在家里经历以线上学习+线下自习的方式完成了高三寒假阶段的学业，回想那段时光，学长们制作的高考前的加油视频给最后阶段迷茫又好奇的我们带来了努力的动力和前行的方向。时光荏苒，转眼间新的一年马上要来临，想必我们的学弟学妹也在经历着同样紧张焦虑却又充满希望的高三的最后冲刺阶段。作为一中的学子，作为博艺计算机社的一员，我想，是时候用同样的方式为我们的学弟学妹们加加油，鼓鼓劲，让他们继续充满信心的在最后半年里把握机会，努力学习，在半年后的高考中收获来自理想大学的offer！</p><h1 id="视频内容"><a href="#视频内容" class="headerlink" title="视频内容"></a>视频内容</h1><p>本次视频创作个人计划有所创新，共分两部分：</p><h2 id="第一部分：传统的高考前一个月发布的加油视频"><a href="#第一部分：传统的高考前一个月发布的加油视频" class="headerlink" title="第一部分：传统的高考前一个月发布的加油视频"></a>第一部分：传统的高考前一个月发布的加油视频</h2><p>立足于高考前一个月左右发布的时期，对学弟学妹们想说些什么（学习方法，加油鼓劲，宣传大学等等）</p><p>视频请尽量保持清晰，时长原则上控制在三分钟以内</p><h2 id="第二部分：寒假假期期间发布-问答环节，学习方法建议，想说的话和对大学的介绍"><a href="#第二部分：寒假假期期间发布-问答环节，学习方法建议，想说的话和对大学的介绍" class="headerlink" title="第二部分：寒假假期期间发布 问答环节，学习方法建议，想说的话和对大学的介绍"></a>第二部分：寒假假期期间发布 问答环节，学习方法建议，想说的话和对大学的介绍</h2><p>立足于寒假期间发布，主要内容包括对学弟学妹们提的问题的回答，想和学弟学妹分享的自己在高三时期学到的好方法，为他们的最后半年加加油，如果再分享一下自己遇到的宝藏大学就再好不过了~</p><p>所有的提问经过筛选后都会在网页(<a href="https://www.0error.xyz/2020/12/19244e3d.html)%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%8C%91%E9%80%89%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E5%9B%9E%E7%AD%94%E7%9A%84%E5%9C%A8%E8%A7%86%E9%A2%91%E9%87%8C%E7%9B%B4%E6%8E%A5%E5%9B%9E%E7%AD%94%E5%8D%B3%E5%8F%AF">https://www.0error.xyz/2020/12/19244e3d.html)实时更新，可以挑选自己想要回答的在视频里直接回答即可</a></p><p>视频时长不限，清晰为主</p><h1 id="总体要求"><a href="#总体要求" class="headerlink" title="总体要求"></a>总体要求</h1><p>总体视频建议清晰度在720P以上，吐字清晰，视频无文字类特效添加（后期统一添加）</p><p>同学校建议考虑一下一起拍~</p><h1 id="投稿方式"><a href="#投稿方式" class="headerlink" title="投稿方式"></a>投稿方式</h1><h2 id="高三学弟学妹提问方式"><a href="#高三学弟学妹提问方式" class="headerlink" title="高三学弟学妹提问方式"></a>高三学弟学妹提问方式</h2><p>联系本人QQ，留下姓名+问题内容（本活动仅限一中高三学生参与）</p><h2 id="毕业生视频投稿方式"><a href="#毕业生视频投稿方式" class="headerlink" title="毕业生视频投稿方式"></a>毕业生视频投稿方式</h2><p>联系本人QQ，按照姓名-大学视频命名格式投递即可，投递前请先说明具体参与的哪一部分的视频</p><h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>QQ: 93431843</p><p>Email: <a href="mailto:&#57;&#51;&#x34;&#x33;&#x31;&#x38;&#52;&#x33;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;">&#57;&#51;&#x34;&#x33;&#x31;&#x38;&#52;&#x33;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>武威一中</tag>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>武威一中高三学子提问问题清单</title>
    <link href="/2020/12/19244e3d.html"/>
    <url>/2020/12/19244e3d.html</url>
    
    <content type="html"><![CDATA[<p>本清单实时更新，敬请关注</p><table><thead><tr><th>问题</th><th>姓名</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>武威一中</tag>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-DP-数塔问题</title>
    <link href="/2020/12/656af927.html"/>
    <url>/2020/12/656af927.html</url>
    
    <content type="html"><![CDATA[<p>Description</p><p>在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的： </p><p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？ </p><p>已经告诉你了，这是个DP的题目，你能AC吗?</p><p>Input</p><p>输入数据首先包括一个整数C,表示测试实例的个数，每个测试实例的第一行是一个整数N(1 &lt;= N &lt;= 100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。 </p><p>Output</p><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。 </p><p>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-keyword">int</span> i,j,n;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200</span>][<span class="hljs-number">200</span>],dp[<span class="hljs-number">200</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>dp[j]=a[n][j];                          <span class="hljs-comment">//对最低层进行初始化 </span><br><span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>dp[j]=max(dp[j],dp[j+<span class="hljs-number">1</span>])+a[i][j];   <span class="hljs-comment">//状态转移方程 ，由下往上求最大值 </span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFUOJ-P239回文数</title>
    <link href="/2020/12/bf195a13.html"/>
    <url>/2020/12/bf195a13.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> n,p[<span class="hljs-number">1000</span>],len,p1[<span class="hljs-number">1000</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)<br><span class="hljs-keyword">if</span>(p[i]!=p[len-i]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)  p1[i]=p[len-i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)  p[i]+=p1[i]; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)<br>    p[i+<span class="hljs-number">1</span>]+=p[i]/n, p[i]=p[i]%n; <br><span class="hljs-keyword">if</span>(p[len+<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span>) len++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;s)<br>&#123;<br><span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(p));<br>len=s.size()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(i=len;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) p[len-i]=s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>)  p[len-i]=s[i]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(f())  &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;0&#x27;</span>&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(t&lt;=<span class="hljs-number">30</span>)<br>&#123;<br>t++;<br>f1();<br><span class="hljs-keyword">if</span>(f()) &#123; <span class="hljs-built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>; &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">30</span>)  <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFUOJ-P210畅通工程并查集</title>
    <link href="/2020/12/a630980b.html"/>
    <url>/2020/12/a630980b.html</url>
    
    <content type="html"><![CDATA[<p>题目：我已经明示到这个程度了你还不用并查集？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> F[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetFather</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> F[x]==x?x:F[x]=GetFather(F[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t1=GetFather(a);<br>    <span class="hljs-keyword">int</span> t2=GetFather(b);<br>    <span class="hljs-keyword">if</span>(t1!=t2) F[t1]=t2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&amp;&amp;n)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;m;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) F[i]=i;<br>        <span class="hljs-keyword">int</span> a,b;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>            Union(a,b);<br>        &#125;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>          <span class="hljs-keyword">if</span>(F[i]==i) res++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFUOJ-P209湖南修路</title>
    <link href="/2020/12/40276439.html"/>
    <url>/2020/12/40276439.html</url>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>prim的最小生成树，套上肝就完事了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 999999;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],dist[<span class="hljs-number">105</span>];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,pos;<br>    <span class="hljs-keyword">int</span> min,sum;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-literal">false</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        dist[i]=<span class="hljs-built_in">map</span>[<span class="hljs-number">1</span>][i];<br>    &#125;<br>    vis[<span class="hljs-number">1</span>]=<span class="hljs-literal">true</span>;<br>    dist[<span class="hljs-number">1</span>]=MAX;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;n; i++)<br>    &#123;<br>        min=MAX;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dist[j]&lt;min)<br>            &#123;<br>                min=dist[j];<br>                pos=j;<br>            &#125;<br>        &#125;<br>        sum+=min;<br>        vis[pos]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dist[j]&gt;<span class="hljs-built_in">map</span>[pos][j])<br>            &#123;<br>                dist[j]=<span class="hljs-built_in">map</span>[pos][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,a,b;<br>    <span class="hljs-keyword">int</span> c,d;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;(n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>); i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b&gt;&gt;c&gt;&gt;d;<br>            <span class="hljs-keyword">if</span>(d==<span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">map</span>[a][b]=<span class="hljs-built_in">map</span>[b][a]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">map</span>[a][b]=<span class="hljs-built_in">map</span>[b][a]=c;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans=prim(n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Prim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFUOJ-汉诺塔问题</title>
    <link href="/2020/12/2cb26a25.html"/>
    <url>/2020/12/2cb26a25.html</url>
    
    <content type="html"><![CDATA[<h1 id="P200汉诺塔"><a href="#P200汉诺塔" class="headerlink" title="P200汉诺塔"></a>P200汉诺塔</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,i;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> s[<span class="hljs-number">40</span>];<br>    s[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">35</span>;i++)<br>    s[i]=<span class="hljs-number">3</span>*s[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s[n]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h1 id="P201又见汉诺塔"><a href="#P201又见汉诺塔" class="headerlink" title="P201又见汉诺塔"></a>P201又见汉诺塔</h1><p>引用一波qky大佬的思路</p><blockquote><p><strong>在题目要求条件下，将n个盘子从左边移动到最右边的最快方法是：</strong></p><p>  <strong>（1）先将n-1个盘子移动到中间</strong></p><p>  <strong>（2）让最大的盘子直接移动到最右边（2步）</strong></p><p>  <strong>（3）最后再让n-1个盘子移动到最右边</strong></p><p><strong>（1）和（3）最需步数应该是一样的，且因为只有最大的盘子才能放在其他盘子上面，所以计算（1）（3）的步骤数时不需考虑这一特殊要求；</strong></p><p> <strong>我用near数组来储存（1）（3）所需的步骤，计算需要递归；n个盘子从左边移动到中间步骤如下：</strong></p><p>  <strong>（1）先让n-1个盘子移动到最右端</strong></p><p>  <strong>（2）让最大的盘子移动到中间</strong></p><p>  <strong>（3）让n-1个盘子从右端移动到中间</strong></p><p> <strong>（1）的话和200题一样的；（3）的话就是递归；</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> han[<span class="hljs-number">21</span>];<br><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> near[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span></span>&#123;<br>    han[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>        han[i]=<span class="hljs-number">3</span>*han[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>    near[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>        near[i]=han[i<span class="hljs-number">-1</span>]+near[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*near[n<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    prepare();<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;fun(n)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>NEFUOJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编-学习笔记</title>
    <link href="/2020/12/dfbbeb49.html"/>
    <url>/2020/12/dfbbeb49.html</url>
    
    <content type="html"><![CDATA[<h1 id="常用汇编指令"><a href="#常用汇编指令" class="headerlink" title="常用汇编指令"></a>常用汇编指令</h1><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><table><thead><tr><th>指令格式</th><th>指令解释</th></tr></thead><tbody><tr><td>MOV r/m8,r8</td><td>r通用寄存器</td></tr><tr><td>MOV r/m16,r16</td><td>m代表内存</td></tr><tr><td>MOV r/m32,r32</td><td>imm代表立即数</td></tr><tr><td>MOV r8,r/m8</td><td>r8代表8位通用寄存器</td></tr><tr><td>MOV r16,r/m16</td><td>m8代表8位内存</td></tr><tr><td>MOV r32,r/m32</td><td>imm8代表8位立即数</td></tr><tr><td>MOV r8, imm8</td><td></td></tr><tr><td>MOV r16, imm16</td><td></td></tr><tr><td>MOV r32, imm32</td><td></td></tr></tbody></table><h2 id="ADD指令"><a href="#ADD指令" class="headerlink" title="ADD指令"></a>ADD指令</h2><p>指令格式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">8</span>, imm<span class="hljs-number">8</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">16</span>,imm<span class="hljs-number">16</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">32</span>,imm<span class="hljs-number">32</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">16</span>,imm<span class="hljs-number">8</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">32</span>,imm<span class="hljs-number">8</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">8</span>,r<span class="hljs-number">8</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">16</span>,r<span class="hljs-number">16</span><br><span class="hljs-attribute">ADD</span> r/m<span class="hljs-number">32</span>,r<span class="hljs-number">32</span><br><span class="hljs-attribute">ADD</span> r<span class="hljs-number">8</span>,r/m<span class="hljs-number">8</span><br><span class="hljs-attribute">ADD</span> r<span class="hljs-number">16</span>,r/m<span class="hljs-number">16</span><br><span class="hljs-attribute">ADD</span> r<span class="hljs-number">32</span>,r/m<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><h2 id="SUB指令-减法"><a href="#SUB指令-减法" class="headerlink" title="SUB指令(减法)"></a>SUB指令(减法)</h2><p>指令格式:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">SUB</span> r/<span class="hljs-name">m8</span>, im<span class="hljs-name">m8</span><br></code></pre></td></tr></table></figure><h2 id="AND指令"><a href="#AND指令" class="headerlink" title="AND指令"></a>AND指令</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">AND</span> r/m<span class="hljs-number">8</span>, imm<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h2 id="OR指令"><a href="#OR指令" class="headerlink" title="OR指令"></a>OR指令</h2><p>逻辑或运算，对两个值进行或运算</p><h2 id="XOR指令-异或运算"><a href="#XOR指令-异或运算" class="headerlink" title="XOR指令(异或运算)"></a>XOR指令(异或运算)</h2><h2 id="NOT指令"><a href="#NOT指令" class="headerlink" title="NOT指令"></a>NOT指令</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NOT</span> r/m<span class="hljs-number">8</span><br><span class="hljs-attribute">NOT</span> r/m<span class="hljs-number">16</span><br><span class="hljs-attribute">NOT</span> r/m<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><h2 id="MOVS指令：移动数据-内存-gt-内存"><a href="#MOVS指令：移动数据-内存-gt-内存" class="headerlink" title="MOVS指令：移动数据 内存-&gt;内存"></a>MOVS指令：移动数据 内存-&gt;内存</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">MOVS <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br>MOVS <span class="hljs-built_in">WORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br>MOVS <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>RE</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-RE-学习记录-汇编-2</title>
    <link href="/2020/12/134388c0.html"/>
    <url>/2020/12/134388c0.html</url>
    
    <content type="html"><![CDATA[<h1 id="汇编工具DTDebug"><a href="#汇编工具DTDebug" class="headerlink" title="汇编工具DTDebug"></a>汇编工具DTDebug</h1><p>下载后设置好odd与插件路径，同时在属性中设置为管理员身份运行（无Administrator权限进入的时候一直在提示）</p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>存储数据：</p><p>CPU&gt;内存&gt;硬盘</p><p>32位CPU: 8 16 32</p><p>64位CPU: 8 16 32 64</p><p>EIP:存储CPU下一次执行的指令集，不能作他用</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><h3 id="32位寄存器"><a href="#32位寄存器" class="headerlink" title="32位寄存器"></a>32位寄存器</h3><table><thead><tr><th>32位</th><th>16位</th><th>8位</th></tr></thead><tbody><tr><td>WAX</td><td>AX</td><td>AL（低8位）</td></tr><tr><td>ECX</td><td>CX</td><td>CL</td></tr><tr><td>EDX</td><td>DX</td><td>DL</td></tr><tr><td>EBX</td><td>BX</td><td>BL</td></tr><tr><td>ESP</td><td>SP</td><td>AH（高8位）</td></tr><tr><td>EBP</td><td>BP</td><td>CH</td></tr><tr><td>ESI</td><td>SI</td><td>DH</td></tr><tr><td>EDI</td><td>DI</td><td>BH</td></tr></tbody></table><p>8位，16位寄存器同时存在于32位之中，8位指令改32位中的1位，16位改4位</p><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><ol><li><p>立即数到寄存器</p></li><li><p>寄存器到寄存器</p></li><li><p>寄存器到内存</p></li><li><p>内存到寄存器</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-number">1</span>//把<span class="hljs-number">1</span>存储到<span class="hljs-built_in">EAX</span>寄存器<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">EAX</span>//把<span class="hljs-built_in">EAX</span>里面的值存到<span class="hljs-built_in">EDX</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>[存储地址]<br></code></pre></td></tr></table></figure><p>已经申请过的地址，在堆栈窗口内找，可以直接使用</p><blockquote><p>一个字节-Byte</p><p>两个字节-WORD</p><p>四个字节-DWORD</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[],<span class="hljs-built_in">EAX</span>//前提需要保证宽度相同<br></code></pre></td></tr></table></figure><h2 id="内存地址的5种形式"><a href="#内存地址的5种形式" class="headerlink" title="内存地址的5种形式"></a>内存地址的5种形式</h2><ol><li><p>[立即数]</p><p>读取内存的值:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x13FFC4</span>]<br></code></pre></td></tr></table></figure><p>向内存写入数据</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x13FFC4</span>],<span class="hljs-built_in">EAX</span><br></code></pre></td></tr></table></figure></li><li><p>[reg]  <strong><em>reg代表寄存器 可以是8个通用寄存器中的一个</em></strong></p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">0x13FFD0</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ECX</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-number">0x13FFD8</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EDX</span>],<span class="hljs-number">0x87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+立即数]</p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">0x13FFD0</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ECX</span>+<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-number">0x13FFD8</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EDX</span>+<span class="hljs-number">0xC</span>],<span class="hljs-number">0x87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+reg*{1,2,4,8}] (数组的汇编形式)</p><p>代表八个32位的寄存器加上八个32位寄存器乘以1，2，4，8</p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">EAX</span>*<span class="hljs-number">4</span>],<span class="hljs-number">87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+reg*{1,2,4,8}+立即数]</p><p>读取内存的值:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>],<span class="hljs-number">87654321</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="数据的存储模式"><a href="#数据的存储模式" class="headerlink" title="数据的存储模式"></a>数据的存储模式</h1><p>大端模式：数据高位在低位，数据低位在高位</p><p>小端模式：数据低位在低位，数据高位在高位</p><h1 id="MOVS指令"><a href="#MOVS指令" class="headerlink" title="MOVS指令"></a>MOVS指令</h1><p>BYTE/WORD/DWORD分别简写为MOVSB MOVSW MOVSD</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">MOVS <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br></code></pre></td></tr></table></figure><p>DF位置：每次MOVS指令之后地址减少相应变更（加减具体看DF的值）字节的地址</p><p>DF的值表示方向位：0为+，1为-</p><h1 id="STOS指令：将AL-AX-EAX的值存储到-EDI-的指定存储单元"><a href="#STOS指令：将AL-AX-EAX的值存储到-EDI-的指定存储单元" class="headerlink" title="STOS指令：将AL/AX/EAX的值存储到[EDI]的指定存储单元"></a>STOS指令：将AL/AX/EAX的值存储到[EDI]的指定存储单元</h1><p>STOS BYTE PTR ES:[EDI]</p><h1 id="REP指令"><a href="#REP指令" class="headerlink" title="REP指令"></a>REP指令</h1><p>MAV ECX,10</p><p>REP MOVESD//ECX作为REP指令的计数器</p><p>EAX通常用作返回值</p><p>ESP,EBP通常用作堆栈</p><p>ESI,EDI通常用作串复制的首地址和目标地址</p><h1 id="堆栈相关指令"><a href="#堆栈相关指令" class="headerlink" title="堆栈相关指令"></a>堆栈相关指令</h1><p>堆栈的使用是从大地址向小地址使用</p><p>ESP 栈指针寄存器</p><h2 id="堆栈的使用"><a href="#堆栈的使用" class="headerlink" title="堆栈的使用"></a>堆栈的使用</h2><p>堆栈使用之后要改变ESP指向的位置，防止被覆盖</p><p>例如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">SUB</span> <span class="hljs-built_in">ESP</span>,<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>使用之后取消：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ADD</span><span class="bash"> ESP,8</span><br></code></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>C语言当中局部变量为何赋初始值的原因也就昭然若揭了，因为在内存中ESP寄存器只是指向了未被使用的堆栈，堆栈里面的内容会被覆盖，但是不会被清空，因此创建变量以后他的初始值是未知的，因此创建局部变量需要赋初值</p><h2 id="PUSH-amp-POP指令"><a href="#PUSH-amp-POP指令" class="headerlink" title="PUSH&amp;POP指令"></a>PUSH&amp;POP指令</h2><p>功能：</p><ol><li>将数压入栈顶</li><li>栈顶指针+1</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">PUSH</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[18FFA4]<br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">EAX</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">ECX</span><br></code></pre></td></tr></table></figure><h1 id="修改EIP的指令"><a href="#修改EIP的指令" class="headerlink" title="修改EIP的指令"></a>修改EIP的指令</h1><h2 id="KMP指令"><a href="#KMP指令" class="headerlink" title="KMP指令"></a>KMP指令</h2><p>MOV EIP简写为JMP</p><h2 id="CALL指令"><a href="#CALL指令" class="headerlink" title="CALL指令"></a>CALL指令</h2>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-RE-学习记录-汇编</title>
    <link href="/2020/12/1a09cf7e.html"/>
    <url>/2020/12/1a09cf7e.html</url>
    
    <content type="html"><![CDATA[<h1 id="八进制运算"><a href="#八进制运算" class="headerlink" title="八进制运算"></a>八进制运算</h1><h2 id="加法表"><a href="#加法表" class="headerlink" title="加法表"></a>加法表</h2><table><thead><tr><th>1+1=2</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1+2=3</td><td>2+2=4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1+3=4</td><td>2+3=5</td><td>3+3=6</td><td></td><td></td><td></td><td></td></tr><tr><td>1+4=5</td><td>2+4=6</td><td>3+4=7</td><td>4+4=10</td><td></td><td></td><td></td></tr><tr><td>1+5=6</td><td>2+5=7</td><td>3+5=8</td><td>4+5=11</td><td>5+5=12</td><td></td><td></td></tr><tr><td>1+6=7</td><td>2+6=10</td><td>3+6=11</td><td>4+6=12</td><td>5+6=13</td><td>6+6=14</td><td></td></tr><tr><td>1+7=10</td><td>2+7=11</td><td>3+7=12</td><td>4+7=13</td><td>5+7=14</td><td>6+7=15</td><td>7+7=16</td></tr></tbody></table><a id="more"></a><h2 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h2><table><thead><tr><th>1*1=1</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1*2=2</td><td>2*2=4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1*3=3</td><td>2*3=6</td><td>3*3=11</td><td></td><td></td><td></td><td></td></tr><tr><td>1*4=4</td><td>2*4=10</td><td>3*4=14</td><td>4*4=20</td><td></td><td></td><td></td></tr><tr><td>1*5=5</td><td>2*5=12</td><td>3*5=17</td><td>4*5=24</td><td>5*5=31</td><td></td><td></td></tr><tr><td>1*6=6</td><td>2*6=14</td><td>3*6=22</td><td>4*6=30</td><td>5*6=36</td><td>6*6=44</td><td></td></tr><tr><td>1*7=7</td><td>2*7=16</td><td>3*7=25</td><td>4*7=34</td><td>5*7=43</td><td>6*7=52</td><td>7*7=61</td></tr></tbody></table><h1 id="十六进制表示二进制-全文背诵"><a href="#十六进制表示二进制-全文背诵" class="headerlink" title="十六进制表示二进制(全文背诵)"></a>十六进制表示二进制(全文背诵)</h1><p>十六进制可以简写二进制</p><table><thead><tr><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0000</td><td>0</td></tr><tr><td>0001</td><td>1</td></tr><tr><td>0010</td><td>2</td></tr><tr><td>0011</td><td>3</td></tr><tr><td>0100</td><td>4</td></tr><tr><td>0101</td><td>5</td></tr><tr><td>0110</td><td>6</td></tr><tr><td>0111</td><td>7</td></tr><tr><td>1000</td><td>8</td></tr><tr><td>1001</td><td>9</td></tr><tr><td>1010</td><td>A</td></tr><tr><td>1011</td><td>B</td></tr><tr><td>1100</td><td>C</td></tr><tr><td>1101</td><td>D</td></tr><tr><td>1110</td><td>E</td></tr><tr><td>1111</td><td>F</td></tr></tbody></table><h1 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h1><h2 id="计算机中常见的数据宽度"><a href="#计算机中常见的数据宽度" class="headerlink" title="计算机中常见的数据宽度"></a>计算机中常见的数据宽度</h2><table><thead><tr><th>数据类型</th><th>宽度(位)</th><th>存储范围</th></tr></thead><tbody><tr><td>位(BIT)</td><td>1</td><td></td></tr><tr><td>字节(BYTE)</td><td>8</td><td>0~0xFF</td></tr><tr><td>字(Word)</td><td>16</td><td>0~0xFFFF</td></tr><tr><td>双字(DoubleWord)</td><td>32</td><td>0~0xFFFFFFFF</td></tr></tbody></table><p>超出最大宽度存储的内容会被丢弃</p><p>例如char x = 0x1FF存入地址后1会被丢弃</p><h1 id="有符号数编码规则"><a href="#有符号数编码规则" class="headerlink" title="有符号数编码规则"></a>有符号数编码规则</h1><h3 id="正数原码补码反码相同"><a href="#正数原码补码反码相同" class="headerlink" title="正数原码补码反码相同"></a>正数原码补码反码相同</h3><p>1 -&gt; 0 0 0 0 0 0 0 1</p><p>6 -&gt; 0 0 0 0 0 1 1 0</p><h3 id="负数原码反码补码编码规则"><a href="#负数原码反码补码编码规则" class="headerlink" title="负数原码反码补码编码规则"></a>负数原码反码补码编码规则</h3><p>原码：最高位为符号位，其余各位为数值本身的绝对值</p><p>反码：</p><ol><li>正数：反码与原码相同</li><li>负数：符号位为1，其余位对原码取反</li></ol><p>补码</p><ol><li><p>正数：补码与源码相同</p></li><li><p>负数：符号位为1，其余位对原码取反加1</p><p>-1</p><p>1 0 0 0 0 0 0 1__原码__</p><p>1 1 1 1 1 1 1 0__反码__</p><p>1 1 1 1 1 1 1 1__补码__</p><p>-7</p><p>1 0 0 0 0 1 1 1</p><p>1 1 1 1 1 0 0 0</p><p>1 1 1 1 1 0 0 1</p></li></ol><h1 id="4-5-的运算过程"><a href="#4-5-的运算过程" class="headerlink" title="4+5=?的运算过程"></a>4+5=?的运算过程</h1><ol><li><p>异或</p><p>​        0000 0100 XOR 0000 0101 = 0000 0001</p></li><li><p>判断是否有进位</p><p>0000 0100 &amp; 0000 0101=0000 0100</p><p>&amp;运算后，全0则无进位，有1则在1所在位数+1的位数进1，此处&amp;运算后值不为0</p></li><li><p>继续异或</p><p>0000 0001 XOR 0000 1000 = 0000 1001</p></li><li><p>判断是否有进位</p><p>0000 0001 &amp; 0000 1000 = 0000 0000</p><h1 id="4-5-的运算过程-1"><a href="#4-5-的运算过程-1" class="headerlink" title="4-5=?的运算过程"></a>4-5=?的运算过程</h1></li></ol><p>4-5=4+(-5)</p><ol><li><p>异或</p><p>0000 0100 XOR 1111 1011 = 1111 1111</p></li><li><p>判断是否有进位</p><p>0000 0100 &amp; 1111 1011 = 0000 0000</p></li><li><p>故结果为1111 1111=FF=-1</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFU15届校赛-大二组</title>
    <link href="/2020/12/8a3e9951.html"/>
    <url>/2020/12/8a3e9951.html</url>
    
    <content type="html"><![CDATA[<h1 id="A-小林找工作"><a href="#A-小林找工作" class="headerlink" title="A.小林找工作"></a>A.小林找工作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> p[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i]);<br>&#125;<br>sort(p+<span class="hljs-number">1</span>,p+n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temp);<br><span class="hljs-keyword">int</span> pos=lower_bound(p+<span class="hljs-number">1</span>,p+n+<span class="hljs-number">1</span>,temp)-p;<br><span class="hljs-keyword">if</span>(pos&gt;n)pos=n;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-built_in">abs</span>(temp-p[pos]);<br><span class="hljs-keyword">if</span>(pos!=<span class="hljs-number">1</span>)ans=min(ans, <span class="hljs-built_in">abs</span>(temp-p[pos<span class="hljs-number">-1</span>]));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="B-xx的树"><a href="#B-xx的树" class="headerlink" title="B.xx的树"></a>B.xx的树</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-keyword">int</span> to;<br><span class="hljs-keyword">int</span> next;<br>&#125;edge;<br><br>edge e[MAXN];<br><span class="hljs-keyword">int</span> cur=<span class="hljs-number">1</span>,head[MAXN],vis[MAXN];<br>ll value[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>e[cur].to=v;<br>e[cur].next=head[u];<br>head[u]=cur++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>vis[u]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[u];i!=<span class="hljs-number">0</span>;i=e[i].next)<br>&#123;<br><span class="hljs-keyword">int</span> v=e[i].to;<br><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>value[v]+=value[u];<br>dfs(v);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">int</span> u,v;<br><span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;v;<br>add(u,v);<br>add(v,u);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>ll u,d;<br><span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;d;<br>value[u]+=d;<br>&#125;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>i==<span class="hljs-number">1</span>?<span class="hljs-built_in">cout</span>&lt;&lt;value[i]:<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;value[i];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-xx玩游戏"><a href="#C-xx玩游戏" class="headerlink" title="C.xx玩游戏"></a>C.xx玩游戏</h1><p>找到规律，偶数列没有必败态，奇数列有（n+1）/2个必败态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br>ll n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>ll t=(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>ll lose=(<span class="hljs-number">1</span>+t)*t/<span class="hljs-number">2</span>;<br>ll sum=(<span class="hljs-number">1</span>+n)*n/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum-lose);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-xx的零食店-待补"><a href="#D-xx的零食店-待补" class="headerlink" title="D. xx的零食店(待补)"></a>D. xx的零食店(待补)</h1><h1 id="E-qyh的签到题"><a href="#E-qyh的签到题" class="headerlink" title="E.qyh的签到题"></a>E.qyh的签到题</h1><p>跟去年校赛大一的一道题神似…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br>ll d1[MAXN],d2[MAXN],d3[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_sum</span><span class="hljs-params">(ll d[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>d[i]+=d[i<span class="hljs-number">-1</span>];<br>d[i]%=mod;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n, &amp;q);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)<br>&#123;<br><span class="hljs-keyword">int</span> type,pos;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;type, &amp;pos);<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">1</span>)d1[pos]++;<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">2</span>)d2[pos]++;<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">3</span>)<br>&#123;<br>d3[pos]++;<br>d3[pos+<span class="hljs-number">1</span>]++;<br>&#125;<br>&#125;<br>pre_sum(d3);pre_sum(d3);pre_sum(d3);<br>pre_sum(d2);pre_sum(d2);<br>pre_sum(d1);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>i==<span class="hljs-number">1</span>?<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, (d1[i]+d2[i]+d3[i])%mod):<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (d1[i]+d2[i]+d3[i])%mod);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-天哥的序列"><a href="#G-天哥的序列" class="headerlink" title="G.天哥的序列"></a>G.天哥的序列</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-NEFU15届校赛-大一组</title>
    <link href="/2020/12/ba287589.html"/>
    <url>/2020/12/ba287589.html</url>
    
    <content type="html"><![CDATA[<h1 id="A-三角形面积"><a href="#A-三角形面积" class="headerlink" title="A. 三角形面积"></a>A. 三角形面积</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> a,b,c;<br>    <span class="hljs-keyword">double</span> ans,p,tmp;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    p=(a+b+c)*<span class="hljs-number">0.5</span>;<br>    tmp=p*(p-a)*(p-b)*(p-c);<br>    ans=<span class="hljs-built_in">sqrt</span>(tmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1lf&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="B-最大质因子"><a href="#B-最大质因子" class="headerlink" title="B. 最大质因子"></a>B. 最大质因子</h1><blockquote><p><strong><em>唯一分解定理</em></strong></p><p>唯一分解定理又称为算数基本定理，基本内容是：</p><p>每个大于1的自然数，要么本身就是质数，要么可以写为2个或以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。</p><p>用另一种方法表示就是：</p><p>对于任何一个大于1的正整数,都存在一个标准的分解式: N=p1^a1 * p2^a2<em>···</em>pn^an;（其中一系列an为指数，pn为质数）</p><p>此定理表明：任何一个大于 1 的正整数都可以表示为素数的积。</p></blockquote><p>然而这道题纯暴力就可解…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*<span class="hljs-number">2</span>&lt;=a;i++)<br>     <span class="hljs-keyword">if</span> (a%i==<span class="hljs-number">0</span>) &#123;flag=<span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>; &#125;<br>    <span class="hljs-keyword">if</span> (a==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;a)<br>   &#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=a;i&gt;=<span class="hljs-number">1</span>;i--)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (a%i==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> (judge(i))<br><br>           &#123;<br>               <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-杨辉三角"><a href="#C-杨辉三角" class="headerlink" title="C.杨辉三角"></a>C.杨辉三角</h1><p>模板例题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br>a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>a[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)<span class="hljs-comment">//行 </span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">1</span> || j==i)<br>&#123;<br>a[i][j]=<span class="hljs-number">1</span>;<span class="hljs-keyword">continue</span>;<br>&#125;<br>a[i][j]=a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i<span class="hljs-number">-1</span>][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-”nefu”的数目"><a href="#D-”nefu”的数目" class="headerlink" title="D.”nefu”的数目"></a>D.”nefu”的数目</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-built_in">string</span> s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">scount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> len=s.length();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=p+<span class="hljs-number">1</span>;i&lt;len;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;e&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;f&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j+<span class="hljs-number">1</span>;k&lt;len;k++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[k]==<span class="hljs-string">&#x27;u&#x27;</span>)sum++;<br><span class="hljs-comment">//cout&lt;&lt;sum&lt;&lt;endl;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;s;<br><span class="hljs-keyword">int</span> len=s.length();<br><span class="hljs-comment">//cout&lt;&lt;len;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;n&#x27;</span>)<br>&#123;<br>    ans+=scount(i);<br>&#125;<br>            <span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;endl;</span><br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-最少修改次数-1"><a href="#E-最少修改次数-1" class="headerlink" title="E. 最少修改次数(1)"></a>E. 最少修改次数(1)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-built_in">string</span> s,t;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;s)<br>   &#123;<br>       <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>       <span class="hljs-keyword">int</span> ct=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">int</span> nums=s.size(),numt=t.size();<br>       <span class="hljs-keyword">int</span> min=<span class="hljs-number">1111</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=nums-numt;i++)<br>       &#123;<br>           <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>           ct=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=i;k&lt;=i+numt<span class="hljs-number">-1</span>;k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[k]!=t[j]) ct++;<br>                j++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ct&lt;min) min=ct;<br>       &#125;<br><br>       <span class="hljs-built_in">cout</span>&lt;&lt;min&lt;&lt;<span class="hljs-built_in">endl</span>;<br>   &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-字典序"><a href="#F-字典序" class="headerlink" title="F.字典序"></a>F.字典序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>  &#123;<br>     <span class="hljs-built_in">string</span> s1,s,max=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>     &#123;<br>       <span class="hljs-keyword">int</span> m=i;<br>       s.clear();s1.clear();<br>       <span class="hljs-keyword">while</span>(m!=<span class="hljs-number">0</span>)<br>        &#123;<br>         s+=m%<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>;<br>         m/=<span class="hljs-number">8</span>;<br>        &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=s.size()<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>       &#123;<br>           s1+=s[j];<br>   &#125;<br>        <span class="hljs-keyword">if</span> (s1&gt;max) max=s1;<br>     &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="hljs-built_in">endl</span>;<br>  &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-最小差值"><a href="#G-最小差值" class="headerlink" title="G.最小差值"></a>G.最小差值</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,tot=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>tot+=a[i];<br>&#125;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>,ans=<span class="hljs-number">999999</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> com;<br>sum+=a[i];<br>com=tot-sum;<br>ans=min(ans, <span class="hljs-built_in">abs</span>(com-sum));<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-染色方案（待补）"><a href="#H-染色方案（待补）" class="headerlink" title="H.染色方案（待补）"></a>H.染色方案（待补）</h1><h1 id="I-最大正方形"><a href="#I-最大正方形" class="headerlink" title="I.最大正方形"></a>I.最大正方形</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>&#125;<br>sort(a+<span class="hljs-number">1</span>, a+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;=ans+<span class="hljs-number">1</span>)<br>&#123;<br>ans++;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J-最大值"><a href="#J-最大值" class="headerlink" title="J.最大值"></a>J.最大值</h1><p><strong><em>注意：此题用C++输入输出会超时</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[MAXN];<br><span class="hljs-keyword">int</span> times=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>&#123;<br><span class="hljs-keyword">int</span> maxn=<span class="hljs-number">0</span>,next=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>maxn=max(maxn, a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]==maxn)<br>&#123;<br>times++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>next=max(next, a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;=maxn &amp;&amp; times&lt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, next);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K-循环排列-待补"><a href="#K-循环排列-待补" class="headerlink" title="K.循环排列(待补)"></a>K.循环排列(待补)</h1><h1 id="L-库特与围棋-待补"><a href="#L-库特与围棋-待补" class="headerlink" title="L.库特与围棋(待补)"></a>L.库特与围棋(待补)</h1>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>NEFU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-学习记录-尺取法</title>
    <link href="/2020/12/e3871ff6.html"/>
    <url>/2020/12/e3871ff6.html</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>给定一个数组和一个数s，在这个数组中找一个区间，使得这个区间之和等于s。</strong></p><p><strong>例如：给定的数组int x[14] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};和一个s = 15。那么，可以找到的区间就应该有0到4， 3到5， 6到7.（注意这里的下标从0开始）</strong></p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于这样的题，不用任何技巧就可以跑出结果，例如下面这个方法可能是大多数人能够想出来的：</p><p>先用一个数组sum[i]存放前i个元素的和，其实现用的是”递推思想“，注意，在编程中”递推“的思想用的特别多，一定要习惯这种思维方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">sum[<span class="hljs-number">0</span>] = x[<span class="hljs-number">0</span>];<span class="hljs-comment">//x为给定的原数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>   sum[i] += sum[i<span class="hljs-number">-1</span>];<span class="hljs-comment">//递推思想</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过两层循环求解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = n<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br><span class="hljs-keyword">if</span>(sum[j]-sum[i]==s)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d---%d\n&quot;</span>, i, j);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法当然是可行的，但是复杂度太高，有一个算法可以将其复杂度降为O(n)。这就是”尺取算法“。</p><p>尺取法：顾名思义，像尺子一样取一段，借用挑战书上面的话说，尺取法通常是对数组保存一对下标，即所选取的区间的左右端点，然后根据实际情况不断地推进区间左右端点以得出答案。之所以需要掌握这个技巧，是因为尺取法比直接暴力枚举区间效率高很多，尤其是数据量大的。</p><p>那么，用”尺取法“做上面这道题思路应该是这样的：</p><p>其实，这种方法很类似于蚯蚓的蠕动。</p><p>1）用一对脚标i, j。最开始都指向第一个元素。</p><p>2）如果区间i到j之和比s小，就让j往后挪一位，并把sum的值加上这个新元素。相当于蚯蚓的头向前伸了一下。</p><p>3）如果区间i到j之和比s大，就让sum减掉第一个元素。相当于蚯蚓的尾巴向前缩了一下。</p><p>4）如果i到j之和刚好等于s，则输入。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findSUM</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> s)</span></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sum = A[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">while</span>(i &lt;= j &amp;&amp; j &lt; n)&#123;<br><span class="hljs-keyword">if</span>(sum &gt;= s)&#123;<br><span class="hljs-keyword">if</span>(sum == s)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d---%d\n&quot;</span>, i, j);<br>sum -= A[i];<br>i++;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>j++;<br>sum += A[j];<br>&#125;<br>&#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">std</span>::ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">int</span> x[<span class="hljs-number">14</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>&#125;;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; m;<br>    findSUM(x, <span class="hljs-number">14</span>, m);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-位运算符-判断奇偶</title>
    <link href="/2020/12/30561a0d.html"/>
    <url>/2020/12/30561a0d.html</url>
    
    <content type="html"><![CDATA[<p>同样一个问题，位运算可以提高程序的运行效率。</p><p>下面讲一下关于奇偶性的判断。</p><p>常规方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> boolean <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><br>​    <span class="hljs-keyword">return</span> i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>位运算方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> boolean <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><br>​    <span class="hljs-keyword">return</span> (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>我们知道计算机中的数字通常用二进制补码表示。</p><p>如果为正数，补码与原码相同，直接看最后一位（因为数字1的前面N位均为0，跟它做与运算，前面肯定为0），奇数为1，偶数为0，与1相与，结果不变。</p><p>如果为负数，补码转原码：保持符号位不动，其它各位取反+1，即为负数的绝对值原码全部取反+1。还是看最后1位，先取反，再+1，结果还是和原来相同。进行与运算时还是原来的末位，所以用跟1做与运算还是保持原来的结果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-刷题记录-14届NEFU校赛</title>
    <link href="/2020/12/77f448c2.html"/>
    <url>/2020/12/77f448c2.html</url>
    
    <content type="html"><![CDATA[<h1 id="P2031凯撒密码"><a href="#P2031凯撒密码" class="headerlink" title="P2031凯撒密码"></a>P2031凯撒密码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-keyword">int</span> d;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;s)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;d;<br><span class="hljs-keyword">int</span> len=s.length();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>&#123;<br>s[i]=s[i]-<span class="hljs-string">&#x27;a&#x27;</span>-d;<br><span class="hljs-keyword">if</span>(s[i]&lt;<span class="hljs-number">0</span>)s[i]=<span class="hljs-number">26</span>+s[i];<br>s[i]=s[i]%<span class="hljs-number">26</span>+<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="P2033神秘数字"><a href="#P2033神秘数字" class="headerlink" title="P2033神秘数字"></a>P2033神秘数字</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n,m,ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-comment">//cout&lt;&lt;pow(10,n)&lt;&lt;endl&lt;&lt;pow(10,n+1)&lt;&lt;endl;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,n<span class="hljs-number">-1</span>);i&lt;<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,n);i++)<br>&#123;<br><span class="hljs-keyword">int</span> num=i,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(num)<br>&#123;<br>sum+=num%<span class="hljs-number">10</span>;<br>num/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==m)<br>&#123;<br><span class="hljs-comment">//cout&lt;&lt;i&lt;&lt;endl;</span><br>ans+=i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P100-快来找一找"><a href="#P100-快来找一找" class="headerlink" title="P100 快来找一找"></a>P100 快来找一找</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> m,maxnum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;m)<br>&#123;<br><span class="hljs-keyword">int</span> tmp;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;tmp;<br>maxnum=max(maxnum,tmp);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;maxnum&lt;&lt;<span class="hljs-built_in">endl</span>;<br>maxnum=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2034-第几个质数"><a href="#P2034-第几个质数" class="headerlink" title="P2034 第几个质数"></a>P2034 第几个质数</h1><p>老夫还是不用筛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> prime[<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isprime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(prime[x]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> prime[x];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-built_in">sqrt</span>(x);i++)<br>&#123;<br><span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> prime[x]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> prime[x]=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n,number=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(prime, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(prime));<br>prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;prime[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>&#123;<br><span class="hljs-keyword">if</span>(!isprime(n))<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(isprime(i))<br>&#123;<br>number++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="hljs-built_in">endl</span>;<br>number=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2039-why的概率论"><a href="#P2039-why的概率论" class="headerlink" title="P2039 why的概率论"></a>P2039 why的概率论</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t,x,y;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">if</span>(!x)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;0 / 1&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>y+=x;<br>x*=<span class="hljs-number">4</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;x/__gcd(x,y)&lt;&lt;<span class="hljs-string">&quot; / &quot;</span>&lt;&lt;y/__gcd(x,y)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2065-小x爱料理"><a href="#P2065-小x爱料理" class="headerlink" title="P2065 小x爱料理"></a>P2065 小x爱料理</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br><span class="hljs-keyword">int</span> u,v,w,a,b,c;<br><span class="hljs-keyword">int</span> n1,n2,n3,ans;<br><span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>n1=u/a;<br>n2=v/b;<br>n3=w/c;<br>ans=min(n1, min(n2, n3));<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="库特的鸽鸽们"><a href="#库特的鸽鸽们" class="headerlink" title="库特的鸽鸽们"></a>库特的鸽鸽们</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n,q,a[MAXN],c[MAXN],p[MAXN],maxn[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>&#125;<br><span class="hljs-built_in">cin</span>&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>&#123;<br><span class="hljs-keyword">int</span> op,x,y;<br><span class="hljs-built_in">cin</span>&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>c[x]=y;<br>p[x]=i;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cin</span>&gt;&gt;maxn[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=q<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br>maxn[i]=max(maxn[i], maxn[i+<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(p[i])<span class="hljs-built_in">cout</span>&lt;&lt;max(c[i], maxn[p[i]])&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;max(maxn[<span class="hljs-number">1</span>], a[i])&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//if(p[n])cout&lt;&lt;max(c[n], maxn[p[n]]);</span><br><span class="hljs-comment">//else cout&lt;&lt;max(maxn[1], a[n]);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-Web-PHP反序列化</title>
    <link href="/2020/12/631a292b.html"/>
    <url>/2020/12/631a292b.html</url>
    
    <content type="html"><![CDATA[<h1 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h1><p>PHP 反序列化漏洞又叫做 PHP 对象注入漏洞，我觉得这个表达很不直白，也不能说明根本的问题，不如我们叫他 PHP 对象的属性篡改漏洞好了(别说这是我说的~~)</p><p>反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控，从上面的例子看，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><a id="more"></a><h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><ol><li>construct(): 当对象创建时会自动调用（但在unserialize()时不会自动调用）</li><li>wakeup(): unserialize()时会自动调用</li><li>destruct(): 当对象被销毁时会自动调用</li><li>toString(): 当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</li><li>get(): 当从不可访问的属性读取数据</li><li>call(): 在对象上下文中调用不可访问的方法时触发</li></ol><p>特别说明第四点：</p><p>_toString触发条件较多，因此容易被忽略，常见的触发条件如下：</p><blockquote><p>(1)echo (<code>$obj</code>) / print(<code>$obj</code>) 打印时会触发</p><p>(2)反序列化对象与字符串连接时</p><p>(3)反序列化对象参与格式化字符串时</p><p>(4)反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）</p><p>(5)反序列化对象参与格式化SQL语句，绑定参数时</p><p>(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p><p>(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</p><p>(8)反序列化的对象作为 class_exists() 的参数的时候</p></blockquote><h1 id="魔法方法的作用"><a href="#魔法方法的作用" class="headerlink" title="魔法方法的作用"></a>魔法方法的作用</h1><p>反序列化了其他的类对象以后我们只是控制了是属性，如果你没有在完成反序列化后的代码中调用其他类对象的方法，我们还是束手无策，毕竟代码是人家写的，人家本身就是要反序列化后调用该类的某个安全的方法，你总不能改人家的代码吧，但是没关系，因为我们有魔法方法。</p><p>魔法正如上面介绍的，魔法方法的调用是在该类序列化或者反序列化的同时自动完成的，不需要人工干预，这就非常符合我们的想法，因此只要魔法方法中出现了一些我们能利用的函数，我们就能通过反序列化中对其对象属性的操控来实现对这些函数的操控，进而达到我们发动攻击的目的。</p><h1 id="利用魔法方法发起攻击"><a href="#利用魔法方法发起攻击" class="headerlink" title="利用魔法方法发起攻击"></a>利用魔法方法发起攻击</h1><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K0rz3n</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> $test;<br>    <span class="hljs-keyword">public</span> $K0rz3n = <span class="hljs-string">&quot;i am K0rz3n&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;test = <span class="hljs-keyword">new</span> L();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;test-&gt;action();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">L</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to XDSEC&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> $test2;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;test2);<br>    &#125;<br>&#125;<br><br>unserialize($_GET[<span class="hljs-string">&#x27;test&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>我们先来分析一下这段代码，首先我们能看到 unserialize() 函数的参数我们是可以控制的，也就是说我们能通过这个接口反序列化任何类的对象(但只有在当前作用域的类才对我们有用)，那我们看一下当前这三个类，我们看到后面两个类反序列化以后对我们没有任何意义，因为我们根本没法调用其中的方法，但是第一个类就不一样了，虽然我们也没有什么代码能实现调用其中的方法的，但是我们发现他有一个魔法函数 __destruct() ，这就非常有趣了，因为这个函数能在对象销毁的时候自动调用，不用我们人工的干预，好，既然这样我们就决定反序列化这个类的对象了，接下来让我们看一下怎么利用(我上面说过了，我们需要控制这个类的某些属性，通过控制属性实现我们的攻击)</p><p>那我们看一下哪些属性的控制是对我们有用的(这个时候我们就跳过了<strong>construct() 方法，毕竟他永远不会被调用)，因为这个例子比较简单，</strong>destruct() 里面只用到了一个属性 test ，那肯定就是他了，那我们控制这个属性为什么内容我们就能攻击了呢，我们再观察一下 那些地方调用了 action() 函数，看看这个函数的调用中有没有存在执行命令或者是其他我们能利用的点的，果然我们在 Evil 这个类中发现他的 action() 函数调用了 eval(),那我们的想法就很明确了，我们需要将 K0rz3n 这个类中的 test 属性篡改为 Evil 这个类的对象，然后为了 eval 能执行命令，我们还要篡改 Evil 对象的 test2 属性，将其改成我们的 Payload</p><p>分析完毕以后我们就可以构建我们的序列化字符串了，构建的方法不是手写(当然你愿意我也不拦着你，理论上是可行的)，我们要将这段代码复制一下，然后修改一些内容并进行序列化操作</p><h2 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K0rz3n</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> $test;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;test = <span class="hljs-keyword">new</span> Evil;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> $test2 = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br><br>&#125;<br><br>$K0rz3n = <span class="hljs-keyword">new</span> K0rz3n;<br>$data = serialize($K0rz3n);<br>file_put_contents(<span class="hljs-string">&quot;seria.txt&quot;</span>, $data);<br></code></pre></td></tr></table></figure><p>我们去除了一切与我们要篡改的属性无关的内容，对其进行序列化操作，然后将序列化的结果复制出来，向刚刚的代码发起请求。可以看到我们攻击成功，特别要提醒一下的就是我在图中框起来的部分，上面说过由于是私有属性，他有自己特殊的格式会在前后加两个 %00 ，所以我们在传输过程中绝对不能忘掉。</p><h2 id="反序列化漏洞方法小结"><a href="#反序列化漏洞方法小结" class="headerlink" title="反序列化漏洞方法小结"></a>反序列化漏洞方法小结</h2><ol><li>寻找unserialize()函数的参数是否有可控点</li><li>寻找反序列化目标，重点为**<em>wakeup()或destruct()**</em>魔法函数的类</li><li>一层一层的研究该类在魔法方法中使用的属性和属性调用的方法，看看是否有可控的属性能实现在当前调用的过程中触发的</li><li>找到要控制的属性之后将要用到的代码部分复制下来，构造序列化，发起攻击</li></ol><p><strong><em>To Be Continued</em></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算-1</title>
    <link href="/2020/12/35ff10df.html"/>
    <url>/2020/12/35ff10df.html</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="DPL-3-A-Largest-Square"><a href="#DPL-3-A-Largest-Square" class="headerlink" title="DPL_3_A: Largest Square"></a>DPL_3_A: Largest Square</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 1400</span><br><br><span class="hljs-keyword">int</span> dp[MAX][MAX], G[MAX][MAX];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> H,<span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> maxWidth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>        &#123;<br>            dp[i][j]=(G[i][j]+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br>            maxWidth |= dp[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;W;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(G[i][j])<br>            &#123;<br>                dp[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dp[i][j]=min(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>], min(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>])) + <span class="hljs-number">1</span>;<br>                maxWidth=max(maxWidth, dp[i][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxWidth * maxWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> H,W;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;H&gt;&gt;W;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;G[i][j];<br>        <span class="hljs-built_in">cout</span>&lt;&lt;getS(H,W)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h1><p>关于%=与|=运算的介绍</p><blockquote><p>a &amp;= b,就是将a与b做按位“与”运算，结果赋值给a,也就相当于a = a &amp; b;<br>a |= b就是将a,b 做按位”或“运算，结果给a,相当于a = a | b;</p><p>（&amp;与运算只有1&amp;1才等于1，其余1&amp;0、0&amp;1、0&amp;0都为0；|或运算只有0&amp;0才等于0，其余1&amp;0、0&amp;1、1&amp;1都为1）</p><p>在嵌入式开发中，经常会操作寄存器，对寄存器进行配置。<br>&amp;= 一般用在复位，即清零，将=号后面0的位清零，1的位保持不变。|= 一般用在置位，即置1，1的位置1，0的位保持不变。<br>两者结合一起用，先复位，后置位。</p><p>例如：（若看不懂请将16进制转为2进制再运算）<br>GPIOA-&gt;CRL &amp;= 0X000FFFFF; 清掉这 3 个位原来的设置，同时也不影响其他位的设置<br>GPIOA-&gt;CRL |= 0XBBB00000;将这 3 个位设置为想要的值，同时也不影响其他位的设置</p><p>总结：&amp;=看0的位；|=看1的位。</p></blockquote><p>题中19行在对dp数组记录进行逆变换后，对maxWidth变量进行了|=操作，目的是为了获取当前最大的Width，此处maxWidth变量非0即1，成1后便不再还原</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-学习记录-DP-1</title>
    <link href="/2020/11/2470a0b3.html"/>
    <url>/2020/11/2470a0b3.html</url>
    
    <content type="html"><![CDATA[<h1 id="DPL-1-A-Coin-Changing-Problem"><a href="#DPL-1-A-Coin-Changing-Problem" class="headerlink" title="DPL_1_A: Coin Changing Problem"></a>DPL_1_A: Coin Changing Problem</h1><p>每次均有两种选择，即选择当前的，即为在当前状态+1，否则维持原来的T[j+d[i]]</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">29</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> d[<span class="hljs-number">20</span>+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> T[<span class="hljs-number">50000</span> + <span class="hljs-number">5</span>];<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-built_in">cin</span>&gt;&gt;d[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50000</span>+<span class="hljs-number">5</span>;i++)<br>&#123;<br>T[i]=INF;<br>&#125;<br>T[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//for(int i=0;i&lt;=50000+5;i++)cout&lt;&lt;T[i]&lt;&lt;endl;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j+d[i]&lt;=n;j++)<br>&#123;<br>T[j + d[i]] = min(T[j+d[i]], T[j]+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;T[n]&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DPL-1-B-0-1-Knapsack-Problem"><a href="#DPL-1-B-0-1-Knapsack-Problem" class="headerlink" title="DPL_1_B: 0-1 Knapsack Problem"></a>DPL_1_B: 0-1 Knapsack Problem</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NMAX 105</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WMAX 10005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Item</span>&#123;</span><br><span class="hljs-keyword">int</span> value;<br><span class="hljs-keyword">int</span> weight;<br>&#125;;<br><br><span class="hljs-keyword">int</span> N,W;<br>Item items[NMAX];<br><span class="hljs-keyword">int</span> C[NMAX][WMAX], G[NMAX][WMAX];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compute</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;maxValue, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;selection)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> w=<span class="hljs-number">0</span>;w&lt;=W;w++)<br>&#123;<br>C[<span class="hljs-number">0</span>][w]=<span class="hljs-number">0</span>;<br>G[<span class="hljs-number">0</span>][w]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>C[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> w=<span class="hljs-number">1</span>;w&lt;=W;w++)<br>&#123;<br>C[i][w]=C[i<span class="hljs-number">-1</span>][w];<br>G[i][w]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(items[i].weight&gt;w)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(items[i].value + C[i<span class="hljs-number">-1</span>][w-items[i].weight]&gt;C[i<span class="hljs-number">-1</span>][w])<br>&#123;<br>C[i][w]=items[i].value + C[i<span class="hljs-number">-1</span>][w-items[i].weight];<br>G[i][w]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>maxValue=C[N][W];<br>selection.clear();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=N,w=W;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(G[i][w]==<span class="hljs-number">1</span>)<br>&#123;<br>selection.push_back(i);<br>w-=items[i].weight;<br>&#125;<br>&#125;<br>reverse(selection.begin(), selection.end());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> maxValue;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; selection;<br><span class="hljs-built_in">cin</span>&gt;&gt;N&gt;&gt;W;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;items[i].value&gt;&gt;items[i].weight;<br>&#125;<br>compute(maxValue, selection);<br><span class="hljs-built_in">cout</span>&lt;&lt;maxValue&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="NEFUOJ-P21-最长上升子序列"><a href="#NEFUOJ-P21-最长上升子序列" class="headerlink" title="NEFUOJ P21 最长上升子序列"></a>NEFUOJ P21 最长上升子序列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 100000</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> n,A[MAX+<span class="hljs-number">1</span>],L[MAX];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lis</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    L[<span class="hljs-number">0</span>]=A[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> length=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L[length<span class="hljs-number">-1</span>]&lt;A[i])<br>        &#123;<br>            L[length++]=A[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            *lower_bound(L, L+length, A[i])=A[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;A[i];<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;lis()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DPL-3-A-Largest-Square"><a href="#DPL-3-A-Largest-Square" class="headerlink" title="DPL_3_A: Largest Square"></a>DPL_3_A: Largest Square</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 1400</span><br><br><span class="hljs-keyword">int</span> dp[MAX][MAX], G[MAX][MAX];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> H,<span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> maxWidth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>        &#123;<br>            dp[i][j]=(G[i][j]+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br>            maxWidth |= dp[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;W;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(G[i][j])<br>            &#123;<br>                dp[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dp[i][j]=min(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>], min(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>])) + <span class="hljs-number">1</span>;<br>                maxWidth=max(maxWidth, dp[i][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxWidth * maxWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> H,W;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;H&gt;&gt;W;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;G[i][j];<br>        <span class="hljs-built_in">cout</span>&lt;&lt;getS(H,W)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-学习记录-数据结构-1</title>
    <link href="/2020/11/ec23b92c.html"/>
    <url>/2020/11/ec23b92c.html</url>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-1-D-Maximum-Profit"><a href="#AOJ-ALDS1-1-D-Maximum-Profit" class="headerlink" title="AOJ-ALDS1_1_D Maximum Profit"></a>AOJ-ALDS1_1_D Maximum Profit</h1><p>本题主要考虑要将复杂度降到O(n)，否则过不了最后五组数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n,maxv=<span class="hljs-number">-1e10</span>;<br><span class="hljs-keyword">int</span> stock[<span class="hljs-number">200000</span> + <span class="hljs-number">5</span>];<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;stock[i];<br>&#125;<br><span class="hljs-keyword">int</span> minv=stock[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;n;j++)<br>&#123;<br>maxv=max(maxv, stock[j]-minv);<br>minv=min(minv, stock[j]);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;maxv&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="STL标准库"><a href="#STL标准库" class="headerlink" title="STL标准库"></a>STL标准库</h1><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回栈的元素数</td><td>O(1)</td></tr><tr><td>top()</td><td>返回栈顶元素</td><td>O(1)</td></tr><tr><td>pop()</td><td>从栈中取出并删除元素</td><td>O(1)</td></tr><tr><td>push()</td><td>添加元素x</td><td>O(1)</td></tr><tr><td>empty()</td><td>在栈为空时返回true</td><td>O(1)</td></tr></tbody></table><h3 id="ALDS1-3-A-Stack"><a href="#ALDS1-3-A-Stack" class="headerlink" title="ALDS1_3_A Stack"></a>ALDS1_3_A Stack</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><span class="hljs-keyword">int</span> a,b,x;<br><span class="hljs-built_in">string</span> str;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;str)<br>&#123;<br><span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>&#123;<br>a=s.top(); s.pop();<br>b=s.top();s.pop();<br>s.push(a+b);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br>b=s.top();s.pop();<br>a=s.top();s.pop();<br>s.push(a-b);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br>a=s.top();s.pop();<br>b=s.top();s.pop();<br>s.push(a*b);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>s.push(atoi(str.c_str()));<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回队列元素数</td><td>O(1)</td></tr><tr><td>front()</td><td>返回队头元素</td><td></td></tr><tr><td>pop()</td><td>从队列中取出并删除元素</td><td></td></tr><tr><td>push()</td><td>向队列中添加元素</td><td></td></tr><tr><td>empty()</td><td>在队列为空时返回true</td><td></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,q,t;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; &gt; Q;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;name&gt;&gt;t;<br>Q.push(<span class="hljs-built_in">make_pair</span>(name, t));<br>&#125;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span> ,<span class="hljs-keyword">int</span>&gt; u;<br><span class="hljs-keyword">int</span> elap=<span class="hljs-number">0</span>,a;<br><br><span class="hljs-keyword">while</span>(!Q.empty())<br>&#123;<br>u=Q.front();Q.pop();<br>a=min(u.second, q);<br>u.second-=a;<br>elap+=a;<br><span class="hljs-keyword">if</span>(u.second&gt;<span class="hljs-number">0</span>)<br>&#123;<br>Q.push(u);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;u.first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;elap&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回向量的元素数</td></tr><tr><td>push_back()</td><td>在向量末尾添加元素x</td></tr><tr><td>pop_back()</td><td>删除向量的最后一个元素</td></tr><tr><td>begin()</td><td>返回指向向量开头的迭代器</td></tr><tr><td>end()</td><td>返回指向向量末尾的迭代器</td></tr><tr><td>insert(p,x)</td><td>在向量的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除向量中位置p的元素</td></tr><tr><td>clear()</td><td>删除向量中的所有元素</td></tr></tbody></table><h2 id="双向链表List"><a href="#双向链表List" class="headerlink" title="双向链表List"></a>双向链表List</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回表的元素数</td></tr><tr><td>begin()</td><td>返回指向表开头的迭代器</td></tr><tr><td>end()</td><td>返回指向表末尾的迭代器</td></tr><tr><td>push_front(x)</td><td>在表开头添加元素x</td></tr><tr><td>push_back(x)</td><td>在表末尾添加元素x</td></tr><tr><td>pop_front()</td><td>删除位于表开头的元素</td></tr><tr><td>pop_back()</td><td>删除位于表末尾的元素</td></tr><tr><td>insert(p, x)</td><td>在表的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除表中位置p的元素</td></tr><tr><td>clear()</td><td>删除表中所有元素</td></tr></tbody></table><h3 id="ALDS1-3-C-Doubly-Linked-List"><a href="#ALDS1-3-C-Doubly-Linked-List" class="headerlink" title="ALDS1_3_C: Doubly Linked List"></a>ALDS1_3_C: Doubly Linked List</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> q,x;<br><span class="hljs-built_in">string</span> command;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-built_in">cin</span>&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;command;<br><span class="hljs-keyword">if</span>(command[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;i&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;x;<br>v.push_front(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">6</span>]==<span class="hljs-string">&#x27;L&#x27;</span>)<br>&#123;<br>v.pop_back();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">6</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)<br>&#123;<br>v.pop_front();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;d&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;x;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=v.begin();it!=v.end();it++)<br>&#123;<br><span class="hljs-keyword">if</span>(*it == x)<br>&#123;<br>v.erase(it);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end();it++)<br>&#123;<br><span class="hljs-keyword">if</span>(i++)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;*it;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ALDS1-3-D-Areas-on-the-Cross-Section-Diagram"><a href="#ALDS1-3-D-Areas-on-the-Cross-Section-Diagram" class="headerlink" title="ALDS1_3_D: Areas on the Cross-Section Diagram"></a>ALDS1_3_D: <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_D">Areas on the Cross-Section Diagram</a></h2><ul><li>如果是“\”，则将表示该字符位置的整数i压入栈S1</li><li>如果是“/”，则送S1顶部取出与之对应的”&quot;的位置i，算出二者的距离并累加到总面积内</li><li>“_”的作用只是将一对/距离增加1，然而在代码中已经通过数学方法计算了，因此可以忽略掉”__”符号</li><li>新形成的面积=当前S2中的两个面积之和+新形成的i-j部分的面积，从S1中取出被引用的多个面积，再将新算出的面积压入S2。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; S1;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-keyword">int</span>&gt; &gt; S2;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-built_in">cin</span>&gt;&gt;c;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;\\&#x27;</span>)S1.push(i);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; S1.size()&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">int</span> j=S1.top(); S1.pop();<br>sum+=i-j;<br><span class="hljs-keyword">int</span> a=i-j;<br><span class="hljs-keyword">while</span>(S2.size()&gt;<span class="hljs-number">0</span> &amp;&amp; S2.top().first&gt;j)<br>&#123;<br>a+=S2.top().second;S2.pop();<br>&#125;<br>S2.push(<span class="hljs-built_in">make_pair</span>(j, a));<br>&#125;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br><span class="hljs-keyword">while</span>(S2.size()&gt;<span class="hljs-number">0</span>)<br>&#123;<br>ans.push_back(S2.top().second);<br>S2.pop();<br>&#125;<br>reverse(ans.begin(),ans.end());<br><span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans.size();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.size();i++)<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;ans[i];<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>++</td><td>让迭代器指向至下一元素</td></tr><tr><td>==，!=</td><td>判断两个迭代器是否指向同一位置并返回结果</td></tr><tr><td>=</td><td>将右侧的值代入左侧迭代器所引用的元素的位置</td></tr><tr><td>*</td><td>返回该位置的元素</td></tr></tbody></table><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><p>返回一个指向第一个不小于指定值value的元素</p><h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h2><p>stable_sort较稳定</p><blockquote><p><strong><em>\</em>sort的应用**</strong>；</p><p>1、可以传入两个参数；</p><p>   sort(a,a+N) ,其中a是数组，a+N表示对a[0]至a[N-1]的N个数进行排序(默认从小到大排序)；</p><p>2、传入三个参数；</p><p>   sort(a,a+N,cmp),第三个参数是一个函数 ；</p><p>   如果让函数从大到小排序，可以用如下算法实现；</p><p>   bool cmp(int a,int b){return a&gt;b};</p><p>   sort(A,A+N,cmp);</p><p>而*<strong>*stable_sort的用法**</strong>与sort一致，<strong>区别是stable_sort函数遇到两个数相等时，不对其交换顺序</strong>；这个应用在数组里面不受影响，当函数参数传入的是结构体时，会发现两者之间的明显区别；</p></blockquote><h2 id="ALDS1-6-D-Minimum-Cost-Sort"><a href="#ALDS1-6-D-Minimum-Cost-Sort" class="headerlink" title="ALDS1_6_D: Minimum Cost Sort"></a>ALDS1_6_D: Minimum Cost Sort</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> vmax=<span class="hljs-number">10000</span>;<br><br><span class="hljs-keyword">int</span> n,a[maxn],s;<br><span class="hljs-keyword">int</span> b[maxn],t[vmax+<span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> v[maxn];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>b[i]=a[i];<br>v[i]=<span class="hljs-literal">false</span>;<br>&#125;<br>sort(b,b+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>t[b[i]] = i;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(v[i])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">int</span> cur=i,m=vmax,an=<span class="hljs-number">0</span>,S=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>v[cur]=<span class="hljs-literal">true</span>;<br>an++;<br><span class="hljs-keyword">int</span> V=a[cur];<br>m=min(m,V);<br>S+=V;<br>cur=t[V];<br><span class="hljs-keyword">if</span>(v[cur])<span class="hljs-keyword">break</span>;<br>&#125;<br>ans+=min(S+(an - <span class="hljs-number">2</span>) *m, m+S+(an+<span class="hljs-number">1</span>)*s);<span class="hljs-comment">//2SOLUTIONS</span><br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br>s=vmax;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>s=min(s,a[i]);<br>&#125;<br><span class="hljs-keyword">int</span> ans=solve();<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h1><h2 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">int</span> c[N+<span class="hljs-number">5</span>][N+<span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lcs</span><span class="hljs-params">(<span class="hljs-built_in">string</span> X, <span class="hljs-built_in">string</span> Y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> m=X.length();<br><span class="hljs-keyword">int</span> n=Y.length();<span class="hljs-comment">//也可.size()</span><br><span class="hljs-keyword">int</span> maxl=<span class="hljs-number">0</span>;<br>X=<span class="hljs-string">&#x27; &#x27;</span>+X;<br>Y=<span class="hljs-string">&#x27; &#x27;</span>+Y;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)c[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)c[<span class="hljs-number">0</span>][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(X[i]==Y[j])<br>&#123;<br>c[i][j]=c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>c[i][j]=max(c[i<span class="hljs-number">-1</span>][j], c[i][j<span class="hljs-number">-1</span>]);<br>&#125;<br>maxl=max(maxl, c[i][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> s1,s2;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;<br><span class="hljs-built_in">cout</span>&lt;&lt;lcs(s1,s2)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-CodeForces-#685(Div.2)</title>
    <link href="/2020/11/e1e96252.html"/>
    <url>/2020/11/e1e96252.html</url>
    
    <content type="html"><![CDATA[<p>好久没见过CF有这么水的contest了，蒟蒻赶紧<del>找找自信</del></p><a id="more"></a><h1 id="A-Subtract-or-Divide"><a href="#A-Subtract-or-Divide" class="headerlink" title="A. Subtract or Divide"></a>A. Subtract or Divide</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T,n;<br><span class="hljs-built_in">cin</span>&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">3</span>)n--;<br><span class="hljs-keyword">else</span>n=<span class="hljs-number">2</span>+(n&amp;<span class="hljs-number">1</span>);<br><span class="hljs-built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Non-Substring-Subsequence"><a href="#B-Non-Substring-Subsequence" class="headerlink" title="B. Non-Substring Subsequence"></a>B. Non-Substring Subsequence</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T;<br><span class="hljs-built_in">cin</span>&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;q&gt;&gt;s;<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br><span class="hljs-keyword">int</span> l,r;<br><span class="hljs-keyword">bool</span> good=<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r;<br>l--;<br>r--;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;l &amp;&amp; good==<span class="hljs-literal">false</span>; i++)<br><span class="hljs-keyword">if</span>(s[i]==s[l])good=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=r+<span class="hljs-number">1</span>;i&lt;n &amp;&amp; good==<span class="hljs-literal">false</span>;i++)<br><span class="hljs-keyword">if</span>(s[i]==s[r])good=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(good==<span class="hljs-literal">true</span>)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-String-Equality"><a href="#C-String-Equality" class="headerlink" title="C. String Equality"></a>C. String Equality</h1><p>这里有必要记录两个很有意思的小知识点，都是C11标准里面新增的，array数组和auto类型变量，auto类型可以根据你赋值的数据自动分配数据类型，用起来十分方便</p><blockquote><p>array&lt;T,N&gt; 模板定义了一种相当于标准数组的容器类型。它是一个有 N 个 T 类型元素的固定序列。除了需要指定元素的类型和个数之外，它和常规数组没有太大的差别。显然，不能增加或删除元素。</p><p>模板实例的元素被内部存储在标准数组中。和标准数组相比，array 容器的额外幵销很小，但提供了两个优点：如果使用 at()，当用一个非法的索引访问数组元素时，能够被检测到，因为容器知道它有多少个元素，这也就意味着数组容器可以作为参数传给函数，而不再需要单独去指定数组元素的个数。</p><p>使用 array 容器类型时，需要在源文件中包含头文件 array。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;array&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T;<br><span class="hljs-built_in">cin</span>&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-keyword">int</span> n,k;<br><span class="hljs-built_in">string</span> s1,s2;<br><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 27&gt; have&#123;&#125;, need&#123;&#125;;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s1&gt;&gt;s2;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: s1)<br>have[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: s2)<br>need[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br><span class="hljs-keyword">bool</span> good = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(have[i]&lt;need[i] || (have[i] -= need[i]) % k)<br>good=<span class="hljs-literal">false</span>;<br>have[i+<span class="hljs-number">1</span>]+=have[i];<br>&#125;<br><span class="hljs-keyword">if</span>(good)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Circle-Game"><a href="#D-Circle-Game" class="headerlink" title="D.Circle Game"></a>D.Circle Game</h1><p>逻辑题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>        <span class="hljs-keyword">int</span> n, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;;) <br>&#123;<br>            <span class="hljs-keyword">if</span>(x &lt;= y &amp;&amp; <span class="hljs-built_in">pow</span>(x+k, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(y, <span class="hljs-number">2</span>) &lt;= <span class="hljs-built_in">pow</span>(n, <span class="hljs-number">2</span>))<br>                x += k;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &gt; y &amp;&amp; <span class="hljs-built_in">pow</span>(y+k, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>) &lt;= <span class="hljs-built_in">pow</span>(n,<span class="hljs-number">2</span>))<br>                y += k;<br>            <span class="hljs-keyword">else</span><span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x == y)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Utkarsh&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Ashish&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>CF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-学习记录-数论</title>
    <link href="/2020/11/fb844361.html"/>
    <url>/2020/11/fb844361.html</url>
    
    <content type="html"><![CDATA[<h1 id="GCD，LCM"><a href="#GCD，LCM" class="headerlink" title="GCD，LCM"></a>GCD，LCM</h1><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>a、b两个数的最大公约数乘以它们最小公倍数等于a和b的乘积</p><p><strong><em>axb=GCD(a,b)xLCM(a,b)</em></strong></p><p>据此定理，求3与8的最小公倍数可以为：LCM(3,8)=3x8divGCD(3,8)=24</p><a id="more"></a><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>构造关系：GCD(a,b)=GCD(b, a mod b)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123; <br> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br> <span class="hljs-keyword">return</span> a; <br><span class="hljs-keyword">return</span>  gcd(b,a%b); <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="二进制最大公约数算法"><a href="#二进制最大公约数算法" class="headerlink" title="二进制最大公约数算法"></a>二进制最大公约数算法</h2><ol><li><p>递归终止条件：GCD(m,m)=m</p></li><li><p>递归关系式：</p><p>m&lt;n时：GCD(m,n)=GCD(n,m)</p><p>m为偶数，n为偶数：Gcd(m,n)=2*Gcd(m/2,n/2)<br>m为偶数，n为奇数：Gcd(m,n)=Gcd(m/2,n)<br>m为奇数，n为偶数：Gcd(m,n)=Gcd(m,n/2)<br>m为奇数，n为奇数：Gcd(m,n)=Gcd(n,m-n)</p></li></ol><h2 id="不定方程的整数解"><a href="#不定方程的整数解" class="headerlink" title="不定方程的整数解"></a>不定方程的整数解</h2><p>方程ax+by=c有整数解的充要条件：gcd(a,b) | c</p><p>设d=gcd(a,b)</p><p>则若我们求得一组(x0,y0)满足ax0+by0=d</p><p>则可以得到原方程的一组解:((x0Xc)/d, (y0xc)/d)</p><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>已知a,b,求解一组x,y，使他们满足贝祖等式[^ax+by=gcd(a,b)=d](根据数论原理，解一定存在）。常用在求解模线性方程组中，也可以用来求解乘法逆元。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Int <span class="hljs-title">exGcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span>&amp; x,<span class="hljs-keyword">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br>&#123;<br>x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">int</span> r=exGcd(b,a%b,x,y);<br><span class="hljs-keyword">int</span> t=x;x=y;y=t-a/b*y;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="勾股数"><a href="#勾股数" class="headerlink" title="勾股数"></a>勾股数</h2><p>勾股数有如下几个性质：</p><ol><li>X,Y,Z一定两两互质</li><li>X,Y一定一奇一偶</li><li>X+Z一定是一个完全平方数</li><li>(Y+Z)/2也是一个完全平方数</li><li>XxYxZ一定能被60整除</li></ol><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><p>​    编程求n个（n≤100）正整数Ai（Ai≤30000，1≤i≤n）的最大公约数和最小公倍数。假设解一定在长整数范围内。</p><blockquote><p>先求出两个数的最大公约数（最小公倍数），再和其他数求最大公约数（最小公倍数），只需调用函数n-1次。可以利用欧几里得算法快速实现：gcd(a1,a2,…,an)=gcd(gcd(a1,a2,…,an-1),an)</p></blockquote><p>​    阶乘问题</p><blockquote><p>​    整数n的阶乘n！是从1到n的所有整数的乘积。编程：输入一正整数n（n≤65000），给出n！的值从右至左有多少位连续的零？并输出n！的值从右至左第一个非零位的值。<br>​    例如：n=5，则5！的值等于120，从右至左有1位连续的0；从右至左第一个非零的值为2。你的输出：<br>​    1<br>​    2<br>​    当n=11时，程序应该输出：<br>​    2<br>​    8</p></blockquote><p>​    分析：</p><p>​    N!的值从右至左连续零的个数，实际上等于n！中所包含的5的因子的总数，这是因为：2x5=10.而n！中包含的2的因子的总数显然比5的因子总数大得多。</p><p>​    在去除了所有从右至左连续的零以后，计算n！的最右非零位数值就可以用以下的公式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(axb)</span><span class="hljs-meta">%</span><span class="hljs-number">10</span>=<span class="hljs-comment">(a%10)</span>x<span class="hljs-comment">(b%10)</span><span class="hljs-meta">%</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h1 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>a%m=b%m，则称a，b mod m同余</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设a，b为两个整数，且它们的差a-b能被某个自然数m所整除，则就称a就模m来说同余于b，或者说a和b关于模m同余，</p><p>​    记为：a=b （mod m）</p><p>它意味着：a-b=mxk（k为整数）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>对于整数a,b,c和自然数m,n则对模m同余满足：</p><ol><li><p>自反性：a = a（mod m）</p></li><li><p>对成性：若a=b（mod m），则b = a（mod m）</p></li><li><p>传递性：若a=b（mod m），b=c（mod m），则a=c（mod m）</p></li><li><p>同加性：若a=b（mod m），则a+c=b+c（mod m）</p></li><li><p>同乘性：若a=b（mod m），则aXc=bXc</p><p>​        一般情况，a=b（mod m），c=d（mod m），则：aXc=bXd（mod m）</p></li><li><p>同幂性：若a=b（mod m）则a^n=b^n(mod m)</p></li><li><p>若a mod p=x， a mod q=x，p、q互质，则a mod（pXq）=x</p><p><strong><em>但是同余不满足同除性，即：a/n != b/n(mod m)</em></strong></p></li></ol><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><h2 id="素数的几个定理"><a href="#素数的几个定理" class="headerlink" title="素数的几个定理"></a>素数的几个定理</h2><h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><p>​    若整数a&gt;=2,那么a一定可以表示为若干个素数的乘积（唯一的形式），即a=p1xp2xp3x…ps(其中pj为素数，称为a的素因子，1&lt;=j&lt;=s)</p><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-学习记录-素数筛</title>
    <link href="/2020/11/91338f8a.html"/>
    <url>/2020/11/91338f8a.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期发现我NEFU低年级组校赛题目只有模拟+数论，恰恰都是我最不会做的，数论方面反反复复用到的就是素数筛，特在此记录一下，闲来无事自己翻阅当作复习复习，以免被到时候<del>一道题都做不出来</del>菜到巨佬们。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>查找2-N的所有素数，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//线性筛</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; MAXN; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>      phi[i] = i - <span class="hljs-number">1</span>;<br>      pri[cnt++] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; cnt; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">1l</span>l * i * pri[j] &gt;= MAXN) <span class="hljs-keyword">break</span>;<br>      vis[i * pri[j]] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (i % pri[j]) &#123;<br>        phi[i * pri[j]] = phi[i] * (pri[j] - <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// i % pri[j] == 0</span><br>        <span class="hljs-comment">// 换言之，i 之前被 pri[j] 筛过了</span><br>        <span class="hljs-comment">// 由于 pri 里面质数是从小到大的，所以 i 乘上其他的质数的结果一定也是</span><br>        <span class="hljs-comment">// pri[j] 的倍数 它们都被筛过了，就不需要再筛了，所以这里直接 break</span><br>        <span class="hljs-comment">// 掉就好了</span><br>        phi[i * pri[j]] = phi[i] * pri[j];<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数论确实是想杀了我- -</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯十一届JavaA组-C++解题</title>
    <link href="/2020/11/1162e7f2.html"/>
    <url>/2020/11/1162e7f2.html</url>
    
    <content type="html"><![CDATA[<p>本人随便乱写，目前正确性未知</p><a id="more"></a><h1 id="C-本质上升序列"><a href="#C-本质上升序列" class="headerlink" title="C.本质上升序列"></a>C.本质上升序列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">bool</span> access[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span> || y&lt;<span class="hljs-number">0</span> || x&gt;=<span class="hljs-number">4</span> || y&gt;=<span class="hljs-number">4</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(access[y][x])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(idx&gt;=<span class="hljs-number">15</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>access[y][x]=<span class="hljs-literal">true</span>;<br>count+=dfs(idx+<span class="hljs-number">1</span>, x+<span class="hljs-number">1</span>, y);<br>count+=dfs(idx+<span class="hljs-number">1</span>, x, y+<span class="hljs-number">1</span>);<br>count+=dfs(idx+<span class="hljs-number">1</span>, x<span class="hljs-number">-1</span>, y);<br>count+=dfs(idx+<span class="hljs-number">1</span>, x, y<span class="hljs-number">-1</span>);<br>access[y][x]=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">int</span> count =<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)<br>&#123;<br>count+=dfs(<span class="hljs-number">0</span>, i%<span class="hljs-number">4</span>, i/<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;count;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-奇偶覆盖"><a href="#H-奇偶覆盖" class="headerlink" title="H. 奇偶覆盖"></a>H. 奇偶覆盖</h1><p>线段树初步版本，未完善</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,h;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> node&amp; a)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h&lt;a.h;<br>    &#125;<br>&#125;e[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">int</span> a[N*<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> sum[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>],flag[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=(a[r]-a[l])-sum[root];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=sum[root&lt;&lt;<span class="hljs-number">1</span>]+sum[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!flag[root])<br>        <span class="hljs-keyword">return</span> ;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    cal(l,mid,root&lt;&lt;<span class="hljs-number">1</span>);<br>    cal(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    flag[root]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)<br>    &#123;<br>        cal(l,r,root);<br>        flag[root]^=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(l,r,root);<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mid&gt;ql)<br>        update(l,mid,root&lt;&lt;<span class="hljs-number">1</span>,ql,qr);<br>    <span class="hljs-keyword">if</span>(mid&lt;qr)<br>        update(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ql,qr);<br>    pushup(root);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">int</span> x1,x2,y1,y2,all=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].h=min(y1,y2);<br>        e[<span class="hljs-number">2</span>*i].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].h=max(y1,y2);<br>        a[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>]=x1,a[<span class="hljs-number">2</span>*i]=x2;<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>);<br>    all=unique(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>)-a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>        e[i].l=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].l)-a,e[i].r=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].r)-a;<br>    sort(e+<span class="hljs-number">1</span>,e+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*n);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        ans+=sum[<span class="hljs-number">1</span>]*(e[i].h-e[i<span class="hljs-number">-1</span>].h);<br>        update(<span class="hljs-number">1</span>,all,<span class="hljs-number">1</span>,e[i].l,e[i].r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习记录-Misc-压缩包加密&amp;取证技术</title>
    <link href="/2020/11/d50e0ee8.html"/>
    <url>/2020/11/d50e0ee8.html</url>
    
    <content type="html"><![CDATA[<h1 id="压缩包加密"><a href="#压缩包加密" class="headerlink" title="压缩包加密"></a>压缩包加密</h1><ol><li><p>暴力破解</p><p>eg. RAR Cracker（Windows）</p><a id="more"></a></li><li><p>ZIP伪加密</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ZIP文件中，文件头和每个文件的核心目录区都有通用标记位。核心目录区的通用标记位距离核心目录区头504B0102的偏移为8字节，其本身占2字节，在低位表示这个文件是否被加密，将其改为0x01后，再次打开会提示输入密码（伪密码），只需将标记复位，即可正常打开。</p><p><strong><em>binwalk -e</em></strong>也可以无视伪加密，**<em>MacOS**</em>也可直接打开压缩包。</p><p>类似的，文件头处的通用标记位距离文件头[^504B0304] 的偏移为6字节，其本身占2个字节，最低位表示这个文件是否被加密，但该位被改为0x01的伪加密压缩包<strong>不能</strong>通过Binwalk或MacOS直接提取，需要手动修改标志位。</p></li><li><p>已知明文攻击</p></li></ol><h1 id="取证技术"><a href="#取证技术" class="headerlink" title="取证技术"></a>取证技术</h1><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="WireShark-amp-Tshark"><a href="#WireShark-amp-Tshark" class="headerlink" title="WireShark&amp;Tshark"></a>WireShark&amp;Tshark</h3><ol><li><p>常见操作</p><p>Wireshark的[^统计]菜单可以查看流量包的大致情况（包含哪些协议，IP地址参与了会话等等），对于切割后小的TCP数据流，可以使用[^追踪TCP流]的方法，即可获取会话中双方传输的所有数据，方便进一步分析。</p><p>对于HTTP等常见协议，WireShark提供了导出对象功能，可以方便的提取传输过程中发送的文件等信息</p></li></ol><h2 id="特殊种类的流量包"><a href="#特殊种类的流量包" class="headerlink" title="特殊种类的流量包"></a>特殊种类的流量包</h2><p>对于一个USB流量包，Tshark工具可以方便地获取纯数据字段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">tshark</span> <span class="hljs-selector-tag">-r</span> <span class="hljs-selector-tag">filename</span><span class="hljs-selector-class">.pcapng</span> <span class="hljs-selector-tag">-T</span> <span class="hljs-selector-tag">fields</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">usb</span><span class="hljs-selector-class">.capdata</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习记录-Misc-图片隐写</title>
    <link href="/2020/11/9ab7588f.html"/>
    <url>/2020/11/9ab7588f.html</url>
    
    <content type="html"><![CDATA[<h1 id="直接附加"><a href="#直接附加" class="headerlink" title="直接附加"></a>直接附加</h1><h2 id="常用文件头-文件尾"><a href="#常用文件头-文件尾" class="headerlink" title="常用文件头/文件尾"></a>常用文件头/文件尾</h2><table><thead><tr><th>文件名</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG(jpg)</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>PNG(png)</td><td>89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>GIF(gif)</td><td>47 49 46 38</td><td>00 3B</td></tr><tr><td>zip</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>RAR</td><td>52 61 72 21</td><td></td></tr><tr><td>WAV</td><td>57 41 56 45</td><td></td></tr><tr><td>avi</td><td>41 56 49 20</td><td></td></tr><tr><td>MPEG(mpg)</td><td>00 00 01 BA/B3</td><td></td></tr><tr><td>mov</td><td>6D 6F 6F 76</td><td></td></tr></tbody></table><h1 id="EXIF隐写"><a href="#EXIF隐写" class="headerlink" title="EXIF隐写"></a>EXIF隐写</h1><h2 id="exiftool工具常用命令"><a href="#exiftool工具常用命令" class="headerlink" title="exiftool工具常用命令"></a>exiftool工具常用命令</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//对于图片Lighthouse.jpg</span><br><span class="hljs-comment">//为图片添加一个comment标签，内容为ExifModifyTesting</span><br>exiftool -comment=ExifModifyTesting ./<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Lighthouse</span>.</span></span>jpg<br><span class="hljs-comment">//查看EXIF信息</span><br>exiftool ./<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Lighthouse</span>.</span></span>jpg<br></code></pre></td></tr></table></figure><h1 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h1><p>LSB全称least significant bit，最低有效位</p><p>PNG文件中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216 种颜色</p><p>人类的眼睛可以区分约1000万种不同的颜色</p><p>这意味着人类的眼睛无法区分余下的颜色大约有6777216种</p><p>LSB隐写就是修改RGB颜色分量的最低二进制位（LSB），而人类的眼睛不会注意到这前后的变化</p><p>每个像数可以携带3比特的信息</p><h2 id="检测隐写常用工具-stegsolve-zsteg"><a href="#检测隐写常用工具-stegsolve-zsteg" class="headerlink" title="检测隐写常用工具 - stegsolve - zsteg"></a>检测隐写常用工具 - stegsolve - zsteg</h2><h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="添加与提取"><a href="#添加与提取" class="headerlink" title="添加与提取"></a>添加与提取</h2><p><a href="https://github.com/chishaxie/BlindWaterMark">BlindWaterMark</a> 频谱隐写可直接使用Adobe Audition</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CodeForces-Round#684-Div.2</title>
    <link href="/2020/11/676fcf4a.html"/>
    <url>/2020/11/676fcf4a.html</url>
    
    <content type="html"><![CDATA[<h1 id="A-Buy-the-String"><a href="#A-Buy-the-String" class="headerlink" title="A. Buy the String"></a>A. Buy the String</h1><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> c[<span class="hljs-number">1005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-keyword">int</span> sum_1=<span class="hljs-number">0</span>,sum_0=<span class="hljs-number">0</span>,ans;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n,c0,c1,h;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;c0&gt;&gt;c1&gt;&gt;h;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;c[i];<br>            <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;1&#x27;</span>)   sum_1++;<br>            <span class="hljs-keyword">else</span>    sum_0++;<br>        &#125;<br>        <span class="hljs-comment">//cout&lt;&lt;sum_0&lt;&lt;endl&lt;&lt;sum_1&lt;&lt;endl;</span><br>        ans=c0*sum_0+c1*sum_1;<br>        <span class="hljs-comment">/*if(c0==c1)</span><br><span class="hljs-comment">            ans=c0*sum_0+c1*sum_1;</span><br><span class="hljs-comment">        if(c0&gt;c1)</span><br><span class="hljs-comment">            ans=min((c1*(sum_1+sum_0))+sum_0*h, ans);</span><br><span class="hljs-comment">        if(c0&lt;c1)</span><br><span class="hljs-comment">            ans=min(c0*(sum_1+sum_0)+sum_1*h, ans);*/</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=sum_0;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> now=(i*h)+((sum_1+i)*c1)+(sum_0-i)*c0;<br>            ans=min(ans, now);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=sum_1;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> now=(i*h)+((sum_0+i)*c0)+(sum_1-i)*c1;<br>            ans=min(ans, now);<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        ans=<span class="hljs-number">0</span>;  sum_1=<span class="hljs-number">0</span>;    sum_0=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Sum-of-Medians"><a href="#B-Sum-of-Medians" class="headerlink" title="B. Sum of Medians"></a>B. Sum of Medians</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> c[<span class="hljs-number">1005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-keyword">int</span> sum_1=<span class="hljs-number">0</span>,sum_0=<span class="hljs-number">0</span>,ans;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n,k;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">int</span> m=n*k;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a(m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        &#123; <br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>         &#125;   <br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> tot=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i+=<span class="hljs-number">2</span>)<br>                tot+=a[i];<br>            <span class="hljs-built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> inter=(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> left=n-inter;<br>        left+=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>,in=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x%left==<span class="hljs-number">0</span>)<br>            &#123;<br>                tot+=a[i];<br>                in++;<br>            &#125;<br>            x+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(in&gt;=k)   <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C1-Binary-Table-Easy-Version"><a href="#C1-Binary-Table-Easy-Version" class="headerlink" title="C1. Binary Table (Easy Version)"></a>C1. Binary Table (Easy Version)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br> <br>        <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">case4</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp;b , <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; a , <span class="hljs-keyword">int</span> i , <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>            a[i][j]=a[i+<span class="hljs-number">1</span>][j]=a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;c;<br>            c.push_back(i);<br>            c.push_back(j);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            b.push_back(c);<br>            c.clear();<br>            c.push_back(i);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            b.push_back(c);<br>            c.clear();<br>            c.push_back(i);<br>            c.push_back(j);<br>            c.push_back(i);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j);<br>            b.push_back(c);<br>            c.clear();<br>            c.push_back(i);<br>            c.push_back(j);<br>            c.push_back(i);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            c.push_back(i+<span class="hljs-number">1</span>);<br>            c.push_back(j+<span class="hljs-number">1</span>);<br>            b.push_back(c);<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">case1</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp;b , <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; a , <span class="hljs-keyword">int</span> i , <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;c;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">case2</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp;b , <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; a , <span class="hljs-keyword">int</span> i , <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;c;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>                a[i][j]=a[i][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                b.push_back(c);<br>                a[i][j]=a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                b.push_back(c);<br>                a[i][j]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i);<br>                c.push_back(j);<br>                b.push_back(c);<br>                a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i);<br>                c.push_back(j);<br>                b.push_back(c);<br>                a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j);<br>                c.push_back(i+<span class="hljs-number">1</span>);<br>                c.push_back(j+<span class="hljs-number">1</span>);<br>                c.push_back(i);<br>                c.push_back(j);<br>                b.push_back(c);<br>                a[i+<span class="hljs-number">1</span>][j]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">int</span> n,m;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;a(n);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>            &#125;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;b;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m<span class="hljs-number">-1</span>;j++)&#123;<br>                    <span class="hljs-keyword">int</span> total=<span class="hljs-number">0</span>;<br>                    total=(a[i][j]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i][j+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i+<span class="hljs-number">1</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    <span class="hljs-keyword">if</span>(total==<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">3</span>)&#123;<br>                        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;c;<br>                        <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.push_back(i);<br>                            c.push_back(j);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.push_back(i);<br>                            c.push_back(j+<span class="hljs-number">1</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.push_back(i+<span class="hljs-number">1</span>);<br>                            c.push_back(j);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.push_back(i+<span class="hljs-number">1</span>);<br>                            c.push_back(j+<span class="hljs-number">1</span>);<br>                        &#125;<br>                        b.push_back(c);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">4</span>)&#123;<br>                        case4(b,a,i,j);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">1</span>)&#123;<br>                        case1(b,a,i,j);<br>                        case4(b,a,i,j);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        case2(b,a,i,j);<br>                        case1(b,a,i,j);<br>                        case4(b,a,i,j);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;(<span class="hljs-keyword">int</span>)b.size()&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-keyword">int</span>)b.size();i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j++)<br>                    <span class="hljs-built_in">cout</span>&lt;&lt;b[i][j]+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">int</span> T;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;T;<br>            <span class="hljs-keyword">while</span>(T--)<br>            &#123;<br>                solve();<br>            &#125;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>PS.这个模拟把人写傻了</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>CF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十六届蓝桥杯-JavaA组T.H奇偶覆盖</title>
    <link href="/2020/11/72bd2125.html"/>
    <url>/2020/11/72bd2125.html</url>
    
    <content type="html"><![CDATA[<p>线段树初步版本，未完善</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,h;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> node&amp; a)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h&lt;a.h;<br>    &#125;<br>&#125;e[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">int</span> a[N*<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> sum[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>],flag[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=(a[r]-a[l])-sum[root];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=sum[root&lt;&lt;<span class="hljs-number">1</span>]+sum[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!flag[root])<br>        <span class="hljs-keyword">return</span> ;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    cal(l,mid,root&lt;&lt;<span class="hljs-number">1</span>);<br>    cal(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    flag[root]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> root,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)<br>    &#123;<br>        cal(l,r,root);<br>        flag[root]^=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(l,r,root);<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mid&gt;ql)<br>        update(l,mid,root&lt;&lt;<span class="hljs-number">1</span>,ql,qr);<br>    <span class="hljs-keyword">if</span>(mid&lt;qr)<br>        update(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ql,qr);<br>    pushup(root);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">int</span> x1,x2,y1,y2,all=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].h=min(y1,y2);<br>        e[<span class="hljs-number">2</span>*i].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].h=max(y1,y2);<br>        a[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>]=x1,a[<span class="hljs-number">2</span>*i]=x2;<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>);<br>    all=unique(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>)-a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>        e[i].l=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].l)-a,e[i].r=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].r)-a;<br>    sort(e+<span class="hljs-number">1</span>,e+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*n);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        ans+=sum[<span class="hljs-number">1</span>]*(e[i].h-e[i<span class="hljs-number">-1</span>].h);<br>        update(<span class="hljs-number">1</span>,all,<span class="hljs-number">1</span>,e[i].l,e[i].r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-DFS-Practice</title>
    <link href="/2020/11/7a871ff6.html"/>
    <url>/2020/11/7a871ff6.html</url>
    
    <content type="html"><![CDATA[<h1 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h1><blockquote><p>给定整数a1,a2…,an,判断是否可以从中选出若干数，使他们的和恰好为k</p></blockquote><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">20</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">int</span> a[maxn],n,k;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> sum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(i==n)    <span class="hljs-keyword">return</span> sum == k;<br>    <span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>, sum))   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>, sum+a[i]))  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;k;<br>    <span class="hljs-keyword">if</span>(dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Lake-Counting-POJ2386"><a href="#Lake-Counting-POJ2386" class="headerlink" title="Lake Counting(POJ2386)"></a>Lake Counting(POJ2386)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">int</span> N,M;<br><span class="hljs-keyword">char</span> f[maxn][maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[x][y]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> dx=<span class="hljs-number">-1</span>;dx&lt;=<span class="hljs-number">1</span>;dx++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> dy=<span class="hljs-number">-1</span>;dy&lt;=<span class="hljs-number">1</span>;dy++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> nx=x+dx, ny=y+dy;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; <span class="hljs-number">0</span>&lt;=ny &amp;&amp; ny&lt; M &amp;&amp; f[nx][ny]==<span class="hljs-string">&#x27;W&#x27;</span>)<br>                dfs(nx,ny);<br>        &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(f[i][j]==<span class="hljs-string">&#x27;W&#x27;</span>)<br>            &#123;<br>                dfs(i, j);<br>                res++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;N&gt;&gt;M;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;f[i][j];<br>    solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes-STL-dfs</title>
    <link href="/2020/10/3fbdba09.html"/>
    <url>/2020/10/3fbdba09.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> book[<span class="hljs-number">101</span>],sum,n,e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;cur&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>sum++;<br><span class="hljs-keyword">if</span>(sum==n)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(e[cur][i]==<span class="hljs-number">1</span> &amp;&amp; book[i] == <span class="hljs-number">0</span>)<br>&#123;<br>book[i]=<span class="hljs-number">1</span>;<br>dfs(i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> m,a,b;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==j)e[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> e[i][j]=<span class="hljs-number">99999999</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>e[a][b]=<span class="hljs-number">1</span>;<br>e[b][a]=<span class="hljs-number">1</span>;<br>&#125;<br><br>book[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>dfs(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notes-ctf-net-pack(WinShark)</title>
    <link href="/2020/10/89cfb270.html"/>
    <url>/2020/10/89cfb270.html</url>
    
    <content type="html"><![CDATA[<h1 id="题目：shark-on-wire-1"><a href="#题目：shark-on-wire-1" class="headerlink" title="题目：shark on wire 1"></a>题目：shark on wire 1</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Description</span><br>We found <span class="hljs-keyword">this</span> packet capture. Recover the flag.<br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里懂得了winshark的一些基本用法（感谢wbl学长），例如常见的CTF的杂项的流量包分析，主要内容集中在TCP中进行TCP追踪流（stream）进行分析，bing查找之后发现了另一种常见的流量包拦截嗅探后寻找admin账号密码以获得flag的方法主要在<em>post</em>请求中查找未解密内容，也在这里一并记录。</p><p>然而，本题的流分析却在以上二者中都没有找到，回过头来返回udp包中进行追踪，在流中发现了fake flag和flag，本题得以解决</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之后有必要对TCP/IP协议和UDP，post请求等基本知识熟练掌握，了解加密解密和SSL（学长说的深一层的难度）</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Caser-Pass-Tool1-C++</title>
    <link href="/2020/10/992fe380.html"/>
    <url>/2020/10/992fe380.html</url>
    
    <content type="html"><![CDATA[<p>刷pico遇到一个凯撒密码加密题，顺手写了个解密工具，但是暂时没有解决到边界字母的升降档问题</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> n,k,s2[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;s[i];<br>s2[i]=(<span class="hljs-keyword">int</span>)s[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>s2[i]+=k;<br><span class="hljs-built_in">cout</span>&lt;&lt;(<span class="hljs-keyword">char</span>)s2[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>P.S C++大法好</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notes-Python-1</title>
    <link href="/2020/10/92ae3954.html"/>
    <url>/2020/10/92ae3954.html</url>
    
    <content type="html"><![CDATA[<h1 id="数组切割"><a href="#数组切割" class="headerlink" title="数组切割"></a>数组切割</h1><p>数组切割格式[.. : ..] <strong><em>(区间为左闭右开)</em></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习C/C++: 还得这样写？！<br>学习python：还能这样写？！</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>picoCTF-day1</title>
    <link href="/2020/10/fa61788.html"/>
    <url>/2020/10/fa61788.html</url>
    
    <content type="html"><![CDATA[<h1 id="Lets-Warm-Up"><a href="#Lets-Warm-Up" class="headerlink" title="Lets Warm Up"></a>Lets Warm Up</h1><p>If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?</p><p>这应该就是签到题了吧？爱了爱了，十六进制转十进制再打表（突然ACM）转ASCII，得到‘p’，按照格式输入即可</p><a id="more"></a><h1 id="The-Numbers"><a href="#The-Numbers" class="headerlink" title="The Numbers"></a>The Numbers</h1><p>下载图片后得到一串数字，根据格式盲猜开头是picoCTF，然后又是一波打表- -，根据这几个字母和他们的数字就硬解出了这道题，拿到了Flag</p><h1 id="2Warm"><a href="#2Warm" class="headerlink" title="2Warm"></a>2Warm</h1><p>进制转换，啊这，这才是签到题吧- -</p><h1 id="Insp3ct0r"><a href="#Insp3ct0r" class="headerlink" title="Insp3ct0r"></a>Insp3ct0r</h1><p>打开网页源代码，找到1/3的Flag，然后观察代码，发现一个css和一个js，可能答案藏在这里，打开之后分别找到第二第三部分，合并即可</p><h1 id="Glory-of-Garden"><a href="#Glory-of-Garden" class="headerlink" title="Glory of Garden"></a>Glory of Garden</h1><p>下载图片，一看就是老套路，第一页题目盲猜不会太深，直接开stegsolve看图片信息，果然找到了flag</p><h1 id="vault-door-training"><a href="#vault-door-training" class="headerlink" title="vault-door-training"></a>vault-door-training</h1><p>题目太长不看，下载java文件打开源码即得flag</p><h1 id="Warmed-UP"><a href="#Warmed-UP" class="headerlink" title="Warmed UP"></a>Warmed UP</h1><p>梅开二度，仿照前面进制转换</p><h1 id="vault-door-1"><a href="#vault-door-1" class="headerlink" title="vault-door-1"></a>vault-door-1</h1><p>本题是前面vault变种，打开源码看应该是一个登录的密码核对的处理机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VaultDoor1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        VaultDoor1 vaultDoor = <span class="hljs-keyword">new</span> VaultDoor1();<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.print(<span class="hljs-string">&quot;Enter vault password: &quot;</span>);<br>String userInput = scanner.next();<br>String input = userInput.substring(<span class="hljs-string">&quot;picoCTF&#123;&quot;</span>.length(),userInput.length()-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (vaultDoor.checkPassword(input)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Access granted.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Access denied!&quot;</span>);<br>&#125;<br>    &#125;<br><br>    <span class="hljs-comment">// I came up with a more secure way to check the password without putting</span><br>    <span class="hljs-comment">// the password itself in the source code. I think this is going to be</span><br>    <span class="hljs-comment">// UNHACKABLE!! I hope Dr. Evil agrees...</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// -Minion #8728</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password.length() == <span class="hljs-number">32</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">0</span>)  == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">29</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">4</span>)  == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">2</span>)  == <span class="hljs-string">&#x27;5&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">23</span>) == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">3</span>)  == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">1</span>)  == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">7</span>)  == <span class="hljs-string">&#x27;b&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">10</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">5</span>)  == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">9</span>)  == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">11</span>) == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">15</span>) == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">8</span>)  == <span class="hljs-string">&#x27;l&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">12</span>) == <span class="hljs-string">&#x27;H&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">20</span>) == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">14</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">6</span>)  == <span class="hljs-string">&#x27;m&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">24</span>) == <span class="hljs-string">&#x27;5&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">18</span>) == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">13</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">19</span>) == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">21</span>) == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">16</span>) == <span class="hljs-string">&#x27;H&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">27</span>) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">30</span>) == <span class="hljs-string">&#x27;b&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">25</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">22</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">28</span>) == <span class="hljs-string">&#x27;6&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">26</span>) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">31</span>) == <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是想要破解密码需要一点点技巧（一个一个手动核对实在是太麻烦了- -），感谢lrj学长的精心指导，让我想起了vs code可以对同样的字符片段进行批量操作，把前面的字符全部删除之后，利用python，把==变成：，然后以数字作为key进行sort排序，然后批量提取即可得到flag，这个记录可圈可点</p><h1 id="what’s-a-net-cat"><a href="#what’s-a-net-cat" class="headerlink" title="what’s a net cat?"></a>what’s a net cat?</h1><p>没啥说的，打开Kali，打开终端</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">nc</span> <span class="hljs-selector-tag">jupiter</span><span class="hljs-selector-class">.challenges</span><span class="hljs-selector-class">.picoctf</span><span class="hljs-selector-class">.org</span> 54271<br></code></pre></td></tr></table></figure><p>即可得到flag</p><h1 id="Strings-it"><a href="#Strings-it" class="headerlink" title="Strings it"></a>Strings it</h1><p>这个下载下来，hint说的是不用打开，那就是hexo了，打开根据编码搜索‘ctf’无果，更换大小写‘CTF’查找几次之后即找到了flag</p><h1 id="Easy1"><a href="#Easy1" class="headerlink" title="Easy1"></a>Easy1</h1><p>这不就是OI的打表题吗，爱了爱了，根据给的table把他进行解码就可以得到flag</p><h1 id="where-are-the-robots"><a href="#where-are-the-robots" class="headerlink" title="where are the robots"></a>where are the robots</h1><p>打开链接以后，根据题目，应该指的是robot.txt，那就访问robot，又得到一个html，即可得到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>dalao们都说picoCTF的题循序渐进，适合入门，看来确实是这样，今后就在这儿开坑了</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes-queue队列</title>
    <link href="/2020/10/64d83881.html"/>
    <url>/2020/10/64d83881.html</url>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>队列的原理基本与站队一样，队首出，队尾入，变化以后也是大同小异，写起来主要就是注意struct的相关知识，以及伪指针（分别指向队首和队尾+1），队尾序号要+1以防首位变量数字重合造成不必要的麻烦（目前也不是很清楚会遇到什么）</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> data[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> head;<br><span class="hljs-keyword">int</span> tail;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span> <span class="hljs-title">q</span>;</span><br><span class="hljs-keyword">int</span> i;<br>q.head=<span class="hljs-number">1</span>;<br>q.tail=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;q.data[q.tail];<br>q.tail++;<br>&#125;<br><br><span class="hljs-keyword">while</span>(q.head&lt;q.tail)<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;q.data[q.head];<br>q.head++;<br>q.data[q.tail]=q.data[q.head];<br>q.tail++;<br>q.head++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写的过程中主要一开始用万能头和STL里面的queue冲突报错了。。（想了好久），其他没什么，队列作为广搜和Bellman-Ford的最短路核心算法还是很有必要理解并记忆的</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes-QuickSort</title>
    <link href="/2020/10/12aa90f7.html"/>
    <url>/2020/10/12aa90f7.html</url>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>快排基本思路应该就是二分+递归，从两侧同时（实则先从右往左）往中间找，同时和参变量对比，发现位置颠倒后交换位置，然后通过二分将其一块一块的分割开，直到分割到一个元素位置，即完成了快排。</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>],n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j,t,temp;<span class="hljs-comment">//temp存基准数 </span><br><span class="hljs-keyword">if</span>(left&gt;right)<span class="hljs-keyword">return</span>;<br><br>temp=a[left];<br>i=left;<br>j=right;<br><span class="hljs-keyword">while</span>(i!=j)<br>&#123;<br><span class="hljs-keyword">while</span>(a[j]&gt;=temp &amp;&amp; i&lt;j)j--;<br><span class="hljs-keyword">while</span>(a[i]&lt;=temp &amp;&amp; i&lt;j)i++;<br><br><span class="hljs-keyword">if</span>(i&lt;j)<br>&#123;<br>t=a[i];<br>a[i]=a[j];<br>a[j]=t;<br>&#125;<br>&#125;<br><br>a[left]=a[i];<br>a[i]=temp;<br><br>quicksort(left, i<span class="hljs-number">-1</span>);<br>quicksort(i+<span class="hljs-number">1</span>,right);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>quicksort(<span class="hljs-number">1</span>,n);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快排应该是最常用的模板了，时间复杂度也比较理想</p><p>PS.致敬一波快排的提出者东尼·霍尔(C. A. R. Hoare)</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuctf-misc-10/09</title>
    <link href="/2020/10/d61633e9.html"/>
    <url>/2020/10/d61633e9.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-金三胖"><a href="#1-金三胖" class="headerlink" title="1.金三胖"></a>1.金三胖</h1><p>典型入门题目，将GIF图片导入StegSolve，Analyse-&gt;Frame Browser，逐帧查看，将闪过的几张falg内容拼接起来即可</p><a id="more"></a><h1 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h1><p>到手先扫描，告诉我This is a Secret（？？？），然后下意识跟着上一题的思路想到图层扫描，经过几次仔细查看后我确定这个图片并没有什么隐藏的图层。。。然后想起来用老套路，放入Binwalk结果发现了夹在里面的压缩文件，爆破得到压缩文件密码即得Flag</p><h1 id="3-N种方法解决"><a href="#3-N种方法解决" class="headerlink" title="3.N种方法解决"></a>3.N种方法解决</h1><p>解压看到一个exe，放入winhex发现一个压缩文件，打开是图片，详细信息里面有base64特征的一串，解密后即得flag</p><h1 id="4-大白"><a href="#4-大白" class="headerlink" title="4.大白"></a>4.大白</h1><p>放入winhex发现图片高度被修改过，将高度修改回来即得flag</p><h1 id="5-你竟然赶我走"><a href="#5-你竟然赶我走" class="headerlink" title="5.你竟然赶我走"></a>5.你竟然赶我走</h1><p>winhex打开查看编码，在最后可发现flag的ASCII码</p><h1 id="6-基础破解"><a href="#6-基础破解" class="headerlink" title="6.基础破解"></a>6.基础破解</h1><p>梅开二度，爆破密码，得到base64，解密即为FLAG</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
