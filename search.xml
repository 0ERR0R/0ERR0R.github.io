<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ACM-学习记录-DP-1</title>
      <link href="2020/11/2470a0b3.html"/>
      <url>2020/11/2470a0b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="DPL-1-A-Coin-Changing-Problem"><a href="#DPL-1-A-Coin-Changing-Problem" class="headerlink" title="DPL_1_A: Coin Changing Problem"></a>DPL_1_A: Coin Changing Problem</h1><p>每次均有两种选择，即选择当前的，即为在当前状态+1，否则维持原来的T[j+d[i]]</p><a id="more"></a><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;using namespace std;const int INF&#x3D;(1&lt;&lt;29);int main()&#123;int n,m;int d[20+5];int T[50000 + 5];cin&gt;&gt;n&gt;&gt;m;for(int i&#x3D;1;i&lt;&#x3D;m;i++)cin&gt;&gt;d[i];for(int i&#x3D;0;i&lt;50000+5;i++)&#123;T[i]&#x3D;INF;&#125;T[0]&#x3D;0;&#x2F;&#x2F;for(int i&#x3D;0;i&lt;&#x3D;50000+5;i++)cout&lt;&lt;T[i]&lt;&lt;endl;for(int i&#x3D;1;i&lt;&#x3D;m;i++)&#123;for(int j&#x3D;0;j+d[i]&lt;&#x3D;n;j++)&#123;T[j + d[i]] &#x3D; min(T[j+d[i]], T[j]+1);&#125;&#125;cout&lt;&lt;T[n]&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DPL-1-B-0-1-Knapsack-Problem"><a href="#DPL-1-B-0-1-Knapsack-Problem" class="headerlink" title="DPL_1_B: 0-1 Knapsack Problem"></a>DPL_1_B: 0-1 Knapsack Problem</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#define NMAX 105#define WMAX 10005using namespace std;struct Item&#123;int value;int weight;&#125;;int N,W;Item items[NMAX];int C[NMAX][WMAX], G[NMAX][WMAX];void compute(int &amp;maxValue, vector&lt;int&gt; &amp;selection)&#123;for(int w&#x3D;0;w&lt;&#x3D;W;w++)&#123;C[0][w]&#x3D;0;G[0][w]&#x3D;1;&#125;for(int i&#x3D;1;i&lt;&#x3D;N;i++)C[i][0]&#x3D;0;for(int i&#x3D;1;i&lt;&#x3D;N;i++)&#123;for(int w&#x3D;1;w&lt;&#x3D;W;w++)&#123;C[i][w]&#x3D;C[i-1][w];G[i][w]&#x3D;0;if(items[i].weight&gt;w)continue;if(items[i].value + C[i-1][w-items[i].weight]&gt;C[i-1][w])&#123;C[i][w]&#x3D;items[i].value + C[i-1][w-items[i].weight];G[i][w]&#x3D;1;&#125;&#125;&#125;maxValue&#x3D;C[N][W];selection.clear();for(int i&#x3D;N,w&#x3D;W;i&gt;&#x3D;1;i--)&#123;if(G[i][w]&#x3D;&#x3D;1)&#123;selection.push_back(i);w-&#x3D;items[i].weight;&#125;&#125;reverse(selection.begin(), selection.end());&#125;int main()&#123;int maxValue;vector&lt;int&gt; selection;cin&gt;&gt;N&gt;&gt;W;for(int i&#x3D;1;i&lt;&#x3D;N;i++)&#123;cin&gt;&gt;items[i].value&gt;&gt;items[i].weight;&#125;compute(maxValue, selection);cout&lt;&lt;maxValue&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="NEFUOJ-P21-最长上升子序列"><a href="#NEFUOJ-P21-最长上升子序列" class="headerlink" title="NEFUOJ P21 最长上升子序列"></a>NEFUOJ P21 最长上升子序列</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#define MAX 100000using namespace std;int n,A[MAX+1],L[MAX];int lis()&#123;    L[0]&#x3D;A[0];    int length&#x3D;1;    for(int i&#x3D;1;i&lt;n;i++)    &#123;        if(L[length-1]&lt;A[i])        &#123;            L[length++]&#x3D;A[i];        &#125;        else            *lower_bound(L, L+length, A[i])&#x3D;A[i];    &#125;    return length;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i&#x3D;0;i&lt;n;i++)    &#123;        cin&gt;&gt;A[i];    &#125;    cout&lt;&lt;lis()&lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DPL-3-A-Largest-Square"><a href="#DPL-3-A-Largest-Square" class="headerlink" title="DPL_3_A: Largest Square"></a>DPL_3_A: Largest Square</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;using namespace std;#define MAX 1400int dp[MAX][MAX], G[MAX][MAX];int getS(int H,int W)&#123;    int maxWidth &#x3D; 0;    for(int i&#x3D;0;i&lt;H;i++)    &#123;        for(int j&#x3D;0;j&lt;W;j++)        &#123;            dp[i][j]&#x3D;(G[i][j]+1)%2;            maxWidth |&#x3D; dp[i][j];        &#125;    &#125;    for(int i&#x3D;1;i&lt;H;i++)    &#123;        for(int j&#x3D;1;j&lt;W;j++)        &#123;            if(G[i][j])            &#123;                dp[i][j]&#x3D;0;            &#125;            else            &#123;                dp[i][j]&#x3D;min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1])) + 1;                maxWidth&#x3D;max(maxWidth, dp[i][j]);            &#125;        &#125;    &#125;    return maxWidth * maxWidth;&#125;int main()&#123;    int H,W;    cin&gt;&gt;H&gt;&gt;W;    for(int i&#x3D;0;i&lt;H;i++)        for(int j&#x3D;0;j&lt;W;j++)            cin&gt;&gt;G[i][j];        cout&lt;&lt;getS(H,W)&lt;&lt;endl;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-数据结构-1</title>
      <link href="2020/11/ec23b92c.html"/>
      <url>2020/11/ec23b92c.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-1-D-Maximum-Profit"><a href="#AOJ-ALDS1-1-D-Maximum-Profit" class="headerlink" title="AOJ-ALDS1_1_D Maximum Profit"></a>AOJ-ALDS1_1_D Maximum Profit</h1><p>本题主要考虑要将复杂度降到O(n)，否则过不了最后五组数据</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int n,maxv&#x3D;-1e10;int stock[200000 + 5];cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;stock[i];&#125;int minv&#x3D;stock[0];for(int j&#x3D;1;j&lt;n;j++)&#123;maxv&#x3D;max(maxv, stock[j]-minv);minv&#x3D;min(minv, stock[j]);&#125;cout&lt;&lt;maxv&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h1 id="STL标准库"><a href="#STL标准库" class="headerlink" title="STL标准库"></a>STL标准库</h1><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回栈的元素数</td><td>O(1)</td></tr><tr><td>top()</td><td>返回栈顶元素</td><td>O(1)</td></tr><tr><td>pop()</td><td>从栈中取出并删除元素</td><td>O(1)</td></tr><tr><td>push()</td><td>添加元素x</td><td>O(1)</td></tr><tr><td>empty()</td><td>在栈为空时返回true</td><td>O(1)</td></tr></tbody></table><h3 id="ALDS1-3-A-Stack"><a href="#ALDS1-3-A-Stack" class="headerlink" title="ALDS1_3_A Stack"></a>ALDS1_3_A Stack</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;stack&gt;using namespace std;int main()&#123;stack&lt;int&gt; s;int a,b,x;string str;while(cin&gt;&gt;str)&#123;if(str[0]&#x3D;&#x3D;&#39;+&#39;)&#123;a&#x3D;s.top(); s.pop();b&#x3D;s.top();s.pop();s.push(a+b);&#125;else if(str[0]&#x3D;&#x3D;&#39;-&#39;)&#123;b&#x3D;s.top();s.pop();a&#x3D;s.top();s.pop();s.push(a-b);&#125;else if(str[0]&#x3D;&#x3D;&#39;*&#39;)&#123;a&#x3D;s.top();s.pop();b&#x3D;s.top();s.pop();s.push(a*b);&#125;else&#123;s.push(atoi(str.c_str()));&#125;&#125;cout&lt;&lt;s.top()&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回队列元素数</td><td>O(1)</td></tr><tr><td>front()</td><td>返回队头元素</td><td></td></tr><tr><td>pop()</td><td>从队列中取出并删除元素</td><td></td></tr><tr><td>push()</td><td>向队列中添加元素</td><td></td></tr><tr><td>empty()</td><td>在队列为空时返回true</td><td></td></tr></tbody></table><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;int n,q,t;string name;queue&lt;pair&lt;string, int&gt; &gt; Q;cin&gt;&gt;n&gt;&gt;q;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;name&gt;&gt;t;Q.push(make_pair(name, t));&#125;pair&lt;string ,int&gt; u;int elap&#x3D;0,a;while(!Q.empty())&#123;u&#x3D;Q.front();Q.pop();a&#x3D;min(u.second, q);u.second-&#x3D;a;elap+&#x3D;a;if(u.second&gt;0)&#123;Q.push(u);&#125;else&#123;cout&lt;&lt;u.first&lt;&lt;&quot; &quot;&lt;&lt;elap&lt;&lt;endl;&#125;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回向量的元素数</td></tr><tr><td>push_back()</td><td>在向量末尾添加元素x</td></tr><tr><td>pop_back()</td><td>删除向量的最后一个元素</td></tr><tr><td>begin()</td><td>返回指向向量开头的迭代器</td></tr><tr><td>end()</td><td>返回指向向量末尾的迭代器</td></tr><tr><td>insert(p,x)</td><td>在向量的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除向量中位置p的元素</td></tr><tr><td>clear()</td><td>删除向量中的所有元素</td></tr></tbody></table><h2 id="双向链表List"><a href="#双向链表List" class="headerlink" title="双向链表List"></a>双向链表List</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回表的元素数</td></tr><tr><td>begin()</td><td>返回指向表开头的迭代器</td></tr><tr><td>end()</td><td>返回指向表末尾的迭代器</td></tr><tr><td>push_front(x)</td><td>在表开头添加元素x</td></tr><tr><td>push_back(x)</td><td>在表末尾添加元素x</td></tr><tr><td>pop_front()</td><td>删除位于表开头的元素</td></tr><tr><td>pop_back()</td><td>删除位于表末尾的元素</td></tr><tr><td>insert(p, x)</td><td>在表的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除表中位置p的元素</td></tr><tr><td>clear()</td><td>删除表中所有元素</td></tr></tbody></table><h3 id="ALDS1-3-C-Doubly-Linked-List"><a href="#ALDS1-3-C-Doubly-Linked-List" class="headerlink" title="ALDS1_3_C: Doubly Linked List"></a>ALDS1_3_C: Doubly Linked List</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;list&gt;#include&lt;algorithm&gt;#include&lt;string&gt;using namespace std;int main()&#123;int q,x;string command;list&lt;int&gt; v;cin&gt;&gt;q;for(int i&#x3D;0;i&lt;q;i++)&#123;cin&gt;&gt;command;if(command[0]&#x3D;&#x3D;&#39;i&#39;)&#123;cin&gt;&gt;x;v.push_front(x);&#125;else if(command[6]&#x3D;&#x3D;&#39;L&#39;)&#123;v.pop_back();&#125;else if(command[6]&#x3D;&#x3D;&#39;F&#39;)&#123;v.pop_front();&#125;else if(command[0]&#x3D;&#x3D;&#39;d&#39;)&#123;cin&gt;&gt;x;for(list&lt;int&gt;::iterator it&#x3D;v.begin();it!&#x3D;v.end();it++)&#123;if(*it &#x3D;&#x3D; x)&#123;v.erase(it);break;&#125;&#125;&#125;&#125;int i&#x3D;0;for(list&lt;int&gt;::iterator it&#x3D;v.begin(); it!&#x3D;v.end();it++)&#123;if(i++)cout&lt;&lt;&quot; &quot;;cout&lt;&lt;*it;&#125;cout&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ALDS1-3-D-Areas-on-the-Cross-Section-Diagram"><a href="#ALDS1-3-D-Areas-on-the-Cross-Section-Diagram" class="headerlink" title="ALDS1_3_D: Areas on the Cross-Section Diagram"></a>ALDS1_3_D: <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_D">Areas on the Cross-Section Diagram</a></h2><ul><li>如果是“\”，则将表示该字符位置的整数i压入栈S1</li><li>如果是“/”，则送S1顶部取出与之对应的”&quot;的位置i，算出二者的距离并累加到总面积内</li><li>“_”的作用只是将一对/距离增加1，然而在代码中已经通过数学方法计算了，因此可以忽略掉”__”符号</li><li>新形成的面积=当前S2中的两个面积之和+新形成的i-j部分的面积，从S1中取出被引用的多个面积，再将新算出的面积压入S2。</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;int main()&#123;stack&lt;int&gt; S1;stack&lt;pair&lt;int ,int&gt; &gt; S2;char c;int sum&#x3D;0;for(int i&#x3D;0;cin&gt;&gt;c;i++)&#123;if(c&#x3D;&#x3D;&#39;\\&#39;)S1.push(i);else if(c&#x3D;&#x3D;&#39;&#x2F;&#39; &amp;&amp; S1.size()&gt;0)&#123;int j&#x3D;S1.top(); S1.pop();sum+&#x3D;i-j;int a&#x3D;i-j;while(S2.size()&gt;0 &amp;&amp; S2.top().first&gt;j)&#123;a+&#x3D;S2.top().second;S2.pop();&#125;S2.push(make_pair(j, a));&#125;&#125;vector&lt;int&gt; ans;while(S2.size()&gt;0)&#123;ans.push_back(S2.top().second);S2.pop();&#125;reverse(ans.begin(),ans.end());cout&lt;&lt;sum&lt;&lt;endl;cout&lt;&lt;ans.size();for(int i&#x3D;0;i&lt;ans.size();i++)&#123;cout&lt;&lt;&quot; &quot;&lt;&lt;ans[i];&#125;cout&lt;&lt;endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>++</td><td>让迭代器指向至下一元素</td></tr><tr><td>==，!=</td><td>判断两个迭代器是否指向同一位置并返回结果</td></tr><tr><td>=</td><td>将右侧的值代入左侧迭代器所引用的元素的位置</td></tr><tr><td>*</td><td>返回该位置的元素</td></tr></tbody></table><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><p>返回一个指向第一个不小于指定值value的元素</p><h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h2><p>stable_sort较稳定</p><blockquote><p><strong><em>\</em>sort的应用**</strong>；</p><p>1、可以传入两个参数；</p><p>   sort(a,a+N) ,其中a是数组，a+N表示对a[0]至a[N-1]的N个数进行排序(默认从小到大排序)；</p><p>2、传入三个参数；</p><p>   sort(a,a+N,cmp),第三个参数是一个函数 ；</p><p>   如果让函数从大到小排序，可以用如下算法实现；</p><p>   bool cmp(int a,int b){return a&gt;b};</p><p>   sort(A,A+N,cmp);</p><p>而*<strong>*stable_sort的用法**</strong>与sort一致，<strong>区别是stable_sort函数遇到两个数相等时，不对其交换顺序</strong>；这个应用在数组里面不受影响，当函数参数传入的是结构体时，会发现两者之间的明显区别；</p></blockquote><h2 id="ALDS1-6-D-Minimum-Cost-Sort"><a href="#ALDS1-6-D-Minimum-Cost-Sort" class="headerlink" title="ALDS1_6_D: Minimum Cost Sort"></a>ALDS1_6_D: Minimum Cost Sort</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;algorithm&gt;using namespace std;const int maxn&#x3D;1000;const int vmax&#x3D;10000;int n,a[maxn],s;int b[maxn],t[vmax+1];int solve()&#123;int ans&#x3D;0;bool v[maxn];for(int i&#x3D;0;i&lt;n;i++)&#123;b[i]&#x3D;a[i];v[i]&#x3D;false;&#125;sort(b,b+n);for(int i&#x3D;0;i&lt;n;i++)&#123;t[b[i]] &#x3D; i;&#125;for(int i&#x3D;0;i&lt;n;i++)&#123;if(v[i])continue;int cur&#x3D;i,m&#x3D;vmax,an&#x3D;0,S&#x3D;0;while(1)&#123;v[cur]&#x3D;true;an++;int V&#x3D;a[cur];m&#x3D;min(m,V);S+&#x3D;V;cur&#x3D;t[V];if(v[cur])break;&#125;ans+&#x3D;min(S+(an - 2) *m, m+S+(an+1)*s);&#x2F;&#x2F;2SOLUTIONS&#125;return ans;&#125;int main()&#123;cin&gt;&gt;n;s&#x3D;vmax;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;a[i];s&#x3D;min(s,a[i]);&#125;int ans&#x3D;solve();cout&lt;&lt;ans&lt;&lt;endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h1><h2 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;const int N&#x3D;1000;int c[N+5][N+5];using namespace std;int lcs(string X, string Y)&#123;int m&#x3D;X.length();int n&#x3D;Y.length();&#x2F;&#x2F;也可.size()int maxl&#x3D;0;X&#x3D;&#39; &#39;+X;Y&#x3D;&#39; &#39;+Y;for(int i&#x3D;1;i&lt;&#x3D;m;i++)c[i][0]&#x3D;0;for(int j&#x3D;1;j&lt;&#x3D;n;j++)c[0][j]&#x3D;0;for(int i&#x3D;1;i&lt;&#x3D;m;i++)&#123;for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;if(X[i]&#x3D;&#x3D;Y[j])&#123;c[i][j]&#x3D;c[i-1][j-1]+1;&#125;else&#123;c[i][j]&#x3D;max(c[i-1][j], c[i][j-1]);&#125;maxl&#x3D;max(maxl, c[i][j]);&#125;&#125;return maxl;&#125;int main()&#123;string s1,s2;int n;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;s1&gt;&gt;s2;cout&lt;&lt;lcs(s1,s2)&lt;&lt;endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-CodeForces-#685(Div.2)</title>
      <link href="2020/11/e1e96252.html"/>
      <url>2020/11/e1e96252.html</url>
      
        <content type="html"><![CDATA[<p>好久没见过CF有这么水的contest了，蒟蒻赶紧<del>找找自信</del></p><a id="more"></a><h1 id="A-Subtract-or-Divide"><a href="#A-Subtract-or-Divide" class="headerlink" title="A. Subtract or Divide"></a>A. Subtract or Divide</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt; using namespace std; int main()&#123;int T,n;cin&gt;&gt;T;while(T--)&#123;cin&gt;&gt;n;if(n&lt;&#x3D;3)n--;elsen&#x3D;2+(n&amp;1);cout&lt;&lt;n&lt;&lt;endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="B-Non-Substring-Subsequence"><a href="#B-Non-Substring-Subsequence" class="headerlink" title="B. Non-Substring Subsequence"></a>B. Non-Substring Subsequence</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt; using namespace std; int main()&#123;int T;cin&gt;&gt;T;while(T--)&#123;int n,q;string s;cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;while(q--)&#123;int l,r;bool good&#x3D;false;cin&gt;&gt;l&gt;&gt;r;l--;r--;for(int i&#x3D;0;i&lt;l &amp;&amp; good&#x3D;&#x3D;false; i++)if(s[i]&#x3D;&#x3D;s[l])good&#x3D;true;for(int i&#x3D;r+1;i&lt;n &amp;&amp; good&#x3D;&#x3D;false;i++)if(s[i]&#x3D;&#x3D;s[r])good&#x3D;true;if(good&#x3D;&#x3D;true)cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;elsecout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;&#125;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-String-Equality"><a href="#C-String-Equality" class="headerlink" title="C. String Equality"></a>C. String Equality</h1><p>这里有必要记录两个很有意思的小知识点，都是C11标准里面新增的，array数组和auto类型变量，auto类型可以根据你赋值的数据自动分配数据类型，用起来十分方便</p><blockquote><p>array&lt;T,N&gt; 模板定义了一种相当于标准数组的容器类型。它是一个有 N 个 T 类型元素的固定序列。除了需要指定元素的类型和个数之外，它和常规数组没有太大的差别。显然，不能增加或删除元素。</p><p>模板实例的元素被内部存储在标准数组中。和标准数组相比，array 容器的额外幵销很小，但提供了两个优点：如果使用 at()，当用一个非法的索引访问数组元素时，能够被检测到，因为容器知道它有多少个元素，这也就意味着数组容器可以作为参数传给函数，而不再需要单独去指定数组元素的个数。</p><p>使用 array 容器类型时，需要在源文件中包含头文件 array。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;array&gt; using namespace std; int main()&#123;int T;cin&gt;&gt;T;while(T--)&#123;int n,k;string s1,s2;array&lt;int, 27&gt; have&#123;&#125;, need&#123;&#125;;cin&gt;&gt;n&gt;&gt;k&gt;&gt;s1&gt;&gt;s2;for(auto&amp; c: s1)have[c-&#39;a&#39;]++;for(auto&amp; c: s2)need[c-&#39;a&#39;]++;bool good &#x3D; true;for(int i&#x3D;0;i&lt;26;i++)&#123;if(have[i]&lt;need[i] || (have[i] -&#x3D; need[i]) % k)good&#x3D;false;have[i+1]+&#x3D;have[i];&#125;if(good)cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;elsecout&lt;&lt;&quot;No&quot;&lt;&lt;endl;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="D-Circle-Game"><a href="#D-Circle-Game" class="headerlink" title="D.Circle Game"></a>D.Circle Game</h1><p>逻辑题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std; int main() &#123;    int T;    cin &gt;&gt; T;    while(T--) &#123;        int n, k;        cin &gt;&gt; n &gt;&gt; k;        int x &#x3D; 0, y &#x3D; 0;        for(;;) &#123;            if(x &lt;&#x3D; y &amp;&amp; pow(x+k, 2) + pow(y, 2) &lt;&#x3D; pow(n, 2))                x +&#x3D; k;            else if(x &gt; y &amp;&amp; pow(y+k, 2) + pow(x, 2) &lt;&#x3D; pow(n,2))                y +&#x3D; k;            elsebreak;        &#125;        if(x &#x3D;&#x3D; y)            cout &lt;&lt; &quot;Utkarsh&quot; &lt;&lt; endl;        else            cout &lt;&lt; &quot;Ashish&quot; &lt;&lt; endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-数论</title>
      <link href="2020/11/fb844361.html"/>
      <url>2020/11/fb844361.html</url>
      
        <content type="html"><![CDATA[<h1 id="GCD，LCM"><a href="#GCD，LCM" class="headerlink" title="GCD，LCM"></a>GCD，LCM</h1><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>a、b两个数的最大公约数乘以它们最小公倍数等于a和b的乘积</p><p><strong><em>axb=GCD(a,b)xLCM(a,b)</em></strong></p><p>据此定理，求3与8的最小公倍数可以为：LCM(3,8)=3x8divGCD(3,8)=24</p><a id="more"></a><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>构造关系：GCD(a,b)=GCD(b, a mod b)</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int gcd(int a,int b) &#123;  if(b&#x3D;&#x3D;0) return a; return  gcd(b,a%b); &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二进制最大公约数算法"><a href="#二进制最大公约数算法" class="headerlink" title="二进制最大公约数算法"></a>二进制最大公约数算法</h2><ol><li><p>递归终止条件：GCD(m,m)=m</p></li><li><p>递归关系式：</p><p>m&lt;n时：GCD(m,n)=GCD(n,m)</p><p>m为偶数，n为偶数：Gcd(m,n)=2*Gcd(m/2,n/2)<br>m为偶数，n为奇数：Gcd(m,n)=Gcd(m/2,n)<br>m为奇数，n为偶数：Gcd(m,n)=Gcd(m,n/2)<br>m为奇数，n为奇数：Gcd(m,n)=Gcd(n,m-n)</p></li></ol><h2 id="不定方程的整数解"><a href="#不定方程的整数解" class="headerlink" title="不定方程的整数解"></a>不定方程的整数解</h2><p>方程ax+by=c有整数解的充要条件：gcd(a,b) | c</p><p>设d=gcd(a,b)</p><p>则若我们求得一组(x0,y0)满足ax0+by0=d</p><p>则可以得到原方程的一组解:((x0Xc)/d, (y0xc)/d)</p><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>已知a,b,求解一组x,y，使他们满足贝祖等式[^ax+by=gcd(a,b)=d](根据数论原理，解一定存在）。常用在求解模线性方程组中，也可以用来求解乘法逆元。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Int exGcd(int a,int b,int&amp; x,int&amp; y)&#123;if(b&#x3D;&#x3D;0)&#123;x&#x3D;1;y&#x3D;0;return a;&#125;int r&#x3D;exGcd(b,a%b,x,y);int t&#x3D;x;x&#x3D;y;y&#x3D;t-a&#x2F;b*y;return r;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="勾股数"><a href="#勾股数" class="headerlink" title="勾股数"></a>勾股数</h2><p>勾股数有如下几个性质：</p><ol><li>X,Y,Z一定两两互质</li><li>X,Y一定一奇一偶</li><li>X+Z一定是一个完全平方数</li><li>(Y+Z)/2也是一个完全平方数</li><li>XxYxZ一定能被60整除</li></ol><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><p>​    编程求n个（n≤100）正整数Ai（Ai≤30000，1≤i≤n）的最大公约数和最小公倍数。假设解一定在长整数范围内。</p><blockquote><p>先求出两个数的最大公约数（最小公倍数），再和其他数求最大公约数（最小公倍数），只需调用函数n-1次。可以利用欧几里得算法快速实现：gcd(a1,a2,…,an)=gcd(gcd(a1,a2,…,an-1),an)</p></blockquote><p>​    阶乘问题</p><blockquote><p>​    整数n的阶乘n！是从1到n的所有整数的乘积。编程：输入一正整数n（n≤65000），给出n！的值从右至左有多少位连续的零？并输出n！的值从右至左第一个非零位的值。<br>​    例如：n=5，则5！的值等于120，从右至左有1位连续的0；从右至左第一个非零的值为2。你的输出：<br>​    1<br>​    2<br>​    当n=11时，程序应该输出：<br>​    2<br>​    8</p></blockquote><p>​    分析：</p><p>​    N!的值从右至左连续零的个数，实际上等于n！中所包含的5的因子的总数，这是因为：2x5=10.而n！中包含的2的因子的总数显然比5的因子总数大得多。</p><p>​    在去除了所有从右至左连续的零以后，计算n！的最右非零位数值就可以用以下的公式：</p><pre class="line-numbers language-none"><code class="language-none">(axb)%10&#x3D;(a%10)x(b%10)%10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>a%m=b%m，则称a，b mod m同余</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设a，b为两个整数，且它们的差a-b能被某个自然数m所整除，则就称a就模m来说同余于b，或者说a和b关于模m同余，</p><p>​    记为：a=b （mod m）</p><p>它意味着：a-b=mxk（k为整数）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>对于整数a,b,c和自然数m,n则对模m同余满足：</p><ol><li><p>自反性：a = a（mod m）</p></li><li><p>对成性：若a=b（mod m），则b = a（mod m）</p></li><li><p>传递性：若a=b（mod m），b=c（mod m），则a=c（mod m）</p></li><li><p>同加性：若a=b（mod m），则a+c=b+c（mod m）</p></li><li><p>同乘性：若a=b（mod m），则aXc=bXc</p><p>​        一般情况，a=b（mod m），c=d（mod m），则：aXc=bXd（mod m）</p></li><li><p>同幂性：若a=b（mod m）则a^n=b^n(mod m)</p></li><li><p>若a mod p=x， a mod q=x，p、q互质，则a mod（pXq）=x</p><p><strong><em>但是同余不满足同除性，即：a/n != b/n(mod m)</em></strong></p></li></ol><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><h2 id="素数的几个定理"><a href="#素数的几个定理" class="headerlink" title="素数的几个定理"></a>素数的几个定理</h2><h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><p>​    若整数a&gt;=2,那么a一定可以表示为若干个素数的乘积（唯一的形式），即a=p1xp2xp3x…ps(其中pj为素数，称为a的素因子，1&lt;=j&lt;=s)</p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-素数筛</title>
      <link href="2020/11/91338f8a.html"/>
      <url>2020/11/91338f8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期发现我NEFU低年级组校赛题目只有模拟+数论，恰恰都是我最不会做的，数论方面反反复复用到的就是素数筛，特在此记录一下，闲来无事自己翻阅当作复习复习，以免被到时候<del>一道题都做不出来</del>菜到巨佬们。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>查找2-N的所有素数，如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;线性筛void init() &#123;  phi[1] &#x3D; 1;  for (int i &#x3D; 2; i &lt; MAXN; ++i) &#123;    if (!vis[i]) &#123;      phi[i] &#x3D; i - 1;      pri[cnt++] &#x3D; i;    &#125;    for (int j &#x3D; 0; j &lt; cnt; ++j) &#123;      if (1ll * i * pri[j] &gt;&#x3D; MAXN) break;      vis[i * pri[j]] &#x3D; 1;      if (i % pri[j]) &#123;        phi[i * pri[j]] &#x3D; phi[i] * (pri[j] - 1);      &#125; else &#123;        &#x2F;&#x2F; i % pri[j] &#x3D;&#x3D; 0        &#x2F;&#x2F; 换言之，i 之前被 pri[j] 筛过了        &#x2F;&#x2F; 由于 pri 里面质数是从小到大的，所以 i 乘上其他的质数的结果一定也是        &#x2F;&#x2F; pri[j] 的倍数 它们都被筛过了，就不需要再筛了，所以这里直接 break        &#x2F;&#x2F; 掉就好了        phi[i * pri[j]] &#x3D; phi[i] * pri[j];        break;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数论确实是想杀了我- -</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯十一届JavaA组-C++解题</title>
      <link href="2020/11/1162e7f2.html"/>
      <url>2020/11/1162e7f2.html</url>
      
        <content type="html"><![CDATA[<p>本人随便乱写，目前正确性未知</p><a id="more"></a><h1 id="C-本质上升序列"><a href="#C-本质上升序列" class="headerlink" title="C.本质上升序列"></a>C.本质上升序列</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;bool access[4][4];int dfs(int idx, int x, int y)&#123;if(x&lt;0 || y&lt;0 || x&gt;&#x3D;4 || y&gt;&#x3D;4)return 0;if(access[y][x])return 0;if(idx&gt;&#x3D;15)return 1;int count&#x3D;0;access[y][x]&#x3D;true;count+&#x3D;dfs(idx+1, x+1, y);count+&#x3D;dfs(idx+1, x, y+1);count+&#x3D;dfs(idx+1, x-1, y);count+&#x3D;dfs(idx+1, x, y-1);access[y][x]&#x3D;false;return count;&#125;int main()&#123;int count &#x3D;0;for(int i&#x3D;0;i&lt;16;i++)&#123;count+&#x3D;dfs(0, i%4, i&#x2F;4);&#125;cout&lt;&lt;count;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="H-奇偶覆盖"><a href="#H-奇偶覆盖" class="headerlink" title="H. 奇偶覆盖"></a>H. 奇偶覆盖</h1><p>线段树初步版本，未完善</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N&#x3D;1e5+5;struct node&#123;    int l,r,h;    bool operator&lt; (const node&amp; a)const    &#123;        return h&lt;a.h;    &#125;&#125;e[N*2];int a[N*2];int sum[N*2*4],flag[N*2*4];void cal(int l,int r,int root)&#123;    sum[root]&#x3D;(a[r]-a[l])-sum[root];&#125;void pushup(int root)&#123;    sum[root]&#x3D;sum[root&lt;&lt;1]+sum[root&lt;&lt;1|1];&#125;void pushdown(int l,int r,int root)&#123;    if(!flag[root])        return ;    flag[root&lt;&lt;1]^&#x3D;1;    flag[root&lt;&lt;1|1]^&#x3D;1;    int mid&#x3D;l+r&gt;&gt;1;    cal(l,mid,root&lt;&lt;1);    cal(mid,r,root&lt;&lt;1|1);    flag[root]&#x3D;0;&#125;void update(int l,int r,int root,int ql,int qr)&#123;    if(l&gt;&#x3D;ql&amp;&amp;r&lt;&#x3D;qr)    &#123;        cal(l,r,root);        flag[root]^&#x3D;1;        return ;    &#125;    pushdown(l,r,root);    int mid&#x3D;l+r&gt;&gt;1;    if(mid&gt;ql)        update(l,mid,root&lt;&lt;1,ql,qr);    if(mid&lt;qr)        update(mid,r,root&lt;&lt;1|1,ql,qr);    pushup(root);&#125;int main()&#123;    int n;    scanf(&quot;%d&quot;,&amp;n);    int x1,x2,y1,y2,all&#x3D;0;    for(int i&#x3D;1;i&lt;&#x3D;n;i++)    &#123;        scanf(&quot;%d%d%d%d&quot;,&amp;x1,&amp;y1,&amp;x2,&amp;y2);        e[2*i-1].l&#x3D;min(x1,x2);        e[2*i-1].r&#x3D;max(x1,x2);        e[2*i-1].h&#x3D;min(y1,y2);        e[2*i].l&#x3D;min(x1,x2);        e[2*i].r&#x3D;max(x1,x2);        e[2*i].h&#x3D;max(y1,y2);        a[2*i-1]&#x3D;x1,a[2*i]&#x3D;x2;    &#125;    sort(a+1,a+1+n*2);    all&#x3D;unique(a+1,a+1+n*2)-a-1;    for(int i&#x3D;1;i&lt;&#x3D;2*n;i++)        e[i].l&#x3D;lower_bound(a+1,a+1+all,e[i].l)-a,e[i].r&#x3D;lower_bound(a+1,a+1+all,e[i].r)-a;    sort(e+1,e+1+2*n);    ll ans&#x3D;0;    for(int i&#x3D;1;i&lt;&#x3D;2*n;i++)    &#123;        ans+&#x3D;sum[1]*(e[i].h-e[i-1].h);        update(1,all,1,e[i].l,e[i].r);    &#125;    printf(&quot;%lld\n&quot;,ans);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF学习记录-Misc-压缩包加密&amp;取证技术</title>
      <link href="2020/11/d50e0ee8.html"/>
      <url>2020/11/d50e0ee8.html</url>
      
        <content type="html"><![CDATA[<h1 id="压缩包加密"><a href="#压缩包加密" class="headerlink" title="压缩包加密"></a>压缩包加密</h1><ol><li><p>暴力破解</p><p>eg. RAR Cracker（Windows）</p><a id="more"></a></li><li><p>ZIP伪加密</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ZIP文件中，文件头和每个文件的核心目录区都有通用标记位。核心目录区的通用标记位距离核心目录区头504B0102的偏移为8字节，其本身占2字节，在低位表示这个文件是否被加密，将其改为0x01后，再次打开会提示输入密码（伪密码），只需将标记复位，即可正常打开。</p><p><strong><em>binwalk -e</em></strong>也可以无视伪加密，**<em>MacOS**</em>也可直接打开压缩包。</p><p>类似的，文件头处的通用标记位距离文件头[^504B0304] 的偏移为6字节，其本身占2个字节，最低位表示这个文件是否被加密，但该位被改为0x01的伪加密压缩包<strong>不能</strong>通过Binwalk或MacOS直接提取，需要手动修改标志位。</p></li><li><p>已知明文攻击</p></li></ol><h1 id="取证技术"><a href="#取证技术" class="headerlink" title="取证技术"></a>取证技术</h1><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="WireShark-amp-Tshark"><a href="#WireShark-amp-Tshark" class="headerlink" title="WireShark&amp;Tshark"></a>WireShark&amp;Tshark</h3><ol><li><p>常见操作</p><p>Wireshark的[^统计]菜单可以查看流量包的大致情况（包含哪些协议，IP地址参与了会话等等），对于切割后小的TCP数据流，可以使用[^追踪TCP流]的方法，即可获取会话中双方传输的所有数据，方便进一步分析。</p><p>对于HTTP等常见协议，WireShark提供了导出对象功能，可以方便的提取传输过程中发送的文件等信息</p></li></ol><h2 id="特殊种类的流量包"><a href="#特殊种类的流量包" class="headerlink" title="特殊种类的流量包"></a>特殊种类的流量包</h2><p>对于一个USB流量包，Tshark工具可以方便地获取纯数据字段：</p><pre class="line-numbers language-none"><code class="language-none">tshark -r filename.pcapng -T fields -e usb.capdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF学习记录-Misc-图片隐写</title>
      <link href="2020/11/9ab7588f.html"/>
      <url>2020/11/9ab7588f.html</url>
      
        <content type="html"><![CDATA[<h1 id="直接附加"><a href="#直接附加" class="headerlink" title="直接附加"></a>直接附加</h1><h2 id="常用文件头-文件尾"><a href="#常用文件头-文件尾" class="headerlink" title="常用文件头/文件尾"></a>常用文件头/文件尾</h2><table><thead><tr><th>文件名</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG(jpg)</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>PNG(png)</td><td>89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>GIF(gif)</td><td>47 49 46 38</td><td>00 3B</td></tr><tr><td>zip</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>RAR</td><td>52 61 72 21</td><td></td></tr><tr><td>WAV</td><td>57 41 56 45</td><td></td></tr><tr><td>avi</td><td>41 56 49 20</td><td></td></tr><tr><td>MPEG(mpg)</td><td>00 00 01 BA/B3</td><td></td></tr><tr><td>mov</td><td>6D 6F 6F 76</td><td></td></tr></tbody></table><h1 id="EXIF隐写"><a href="#EXIF隐写" class="headerlink" title="EXIF隐写"></a>EXIF隐写</h1><h2 id="exiftool工具常用命令"><a href="#exiftool工具常用命令" class="headerlink" title="exiftool工具常用命令"></a>exiftool工具常用命令</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对于图片Lighthouse.jpg&#x2F;&#x2F;为图片添加一个comment标签，内容为ExifModifyTestingexiftool -comment&#x3D;ExifModifyTesting .&#x2F;Lighthouse.jpg&#x2F;&#x2F;查看EXIF信息exiftool .&#x2F;Lighthouse.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h1><p>LSB全称least significant bit，最低有效位</p><p>PNG文件中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216 种颜色</p><p>人类的眼睛可以区分约1000万种不同的颜色</p><p>这意味着人类的眼睛无法区分余下的颜色大约有6777216种</p><p>LSB隐写就是修改RGB颜色分量的最低二进制位（LSB），而人类的眼睛不会注意到这前后的变化</p><p>每个像数可以携带3比特的信息</p><h2 id="检测隐写常用工具-stegsolve-zsteg"><a href="#检测隐写常用工具-stegsolve-zsteg" class="headerlink" title="检测隐写常用工具 - stegsolve - zsteg"></a>检测隐写常用工具 - stegsolve - zsteg</h2><h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="添加与提取"><a href="#添加与提取" class="headerlink" title="添加与提取"></a>添加与提取</h2><p><a href="https://github.com/chishaxie/BlindWaterMark">BlindWaterMark</a> 频谱隐写可直接使用Adobe Audition</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-Round#684-Div.2</title>
      <link href="2020/11/676fcf4a.html"/>
      <url>2020/11/676fcf4a.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-Buy-the-String"><a href="#A-Buy-the-String" class="headerlink" title="A. Buy the String"></a>A. Buy the String</h1><a id="more"></a><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;char c[1005];int main()&#123;    int T;    int sum_1&#x3D;0,sum_0&#x3D;0,ans;    cin&gt;&gt;T;    while(T--)    &#123;        int n,c0,c1,h;        cin&gt;&gt;n&gt;&gt;c0&gt;&gt;c1&gt;&gt;h;        for(int i&#x3D;0;i&lt;n;i++)        &#123;            cin&gt;&gt;c[i];            if(c[i]&#x3D;&#x3D;&#39;1&#39;)   sum_1++;            else    sum_0++;        &#125;        &#x2F;&#x2F;cout&lt;&lt;sum_0&lt;&lt;endl&lt;&lt;sum_1&lt;&lt;endl;        ans&#x3D;c0*sum_0+c1*sum_1;        &#x2F;*if(c0&#x3D;&#x3D;c1)            ans&#x3D;c0*sum_0+c1*sum_1;        if(c0&gt;c1)            ans&#x3D;min((c1*(sum_1+sum_0))+sum_0*h, ans);        if(c0&lt;c1)            ans&#x3D;min(c0*(sum_1+sum_0)+sum_1*h, ans);*&#x2F;        for(int i&#x3D;1;i&lt;&#x3D;sum_0;i++)        &#123;            int now&#x3D;(i*h)+((sum_1+i)*c1)+(sum_0-i)*c0;            ans&#x3D;min(ans, now);        &#125;        for(int i&#x3D;1;i&lt;&#x3D;sum_1;i++)        &#123;            int now&#x3D;(i*h)+((sum_0+i)*c0)+(sum_1-i)*c1;            ans&#x3D;min(ans, now);        &#125;        cout&lt;&lt;ans&lt;&lt;endl;        ans&#x3D;0;  sum_1&#x3D;0;    sum_0&#x3D;0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="B-Sum-of-Medians"><a href="#B-Sum-of-Medians" class="headerlink" title="B. Sum of Medians"></a>B. Sum of Medians</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;char c[1005];int main()&#123;    int T;    int sum_1&#x3D;0,sum_0&#x3D;0,ans;    cin&gt;&gt;T;    while(T--)    &#123;        int n,k;        cin&gt;&gt;n&gt;&gt;k;        int m&#x3D;n*k;        vector&lt;int&gt;a(m);        for(int i&#x3D;0;i&lt;m;i++)        &#123;         cin&gt;&gt;a[i];         &#125;           long long tot&#x3D;0;        if(n&#x3D;&#x3D;2)        &#123;            for(int i&#x3D;0;i&lt;m;i+&#x3D;2)                tot+&#x3D;a[i];            cout&lt;&lt;tot&lt;&lt;endl;            continue;        &#125;        int inter&#x3D;(n+1)&#x2F;2;        int left&#x3D;n-inter;        left+&#x3D;1;        int x&#x3D;1,in&#x3D;0;        for(int i&#x3D;m-1;i&gt;&#x3D;0;i--)        &#123;            if(x%left&#x3D;&#x3D;0)            &#123;                tot+&#x3D;a[i];                in++;            &#125;            x+&#x3D;1;            if(in&gt;&#x3D;k)   break;        &#125;        cout&lt;&lt;tot&lt;&lt;endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C1-Binary-Table-Easy-Version"><a href="#C1-Binary-Table-Easy-Version" class="headerlink" title="C1. Binary Table (Easy Version)"></a>C1. Binary Table (Easy Version)</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;         using namespace std;         void case4(vector&lt;vector&lt;int&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , int i , int j)&#123;            a[i][j]&#x3D;a[i+1][j]&#x3D;a[i][j+1]&#x3D;a[i+1][j+1]&#x3D;&#39;0&#39;;            vector&lt;int&gt;c;            c.push_back(i);            c.push_back(j);            c.push_back(i+1);            c.push_back(j);            c.push_back(i+1);            c.push_back(j+1);            b.push_back(c);            c.clear();            c.push_back(i);            c.push_back(j+1);            c.push_back(i+1);            c.push_back(j);            c.push_back(i+1);            c.push_back(j+1);            b.push_back(c);            c.clear();            c.push_back(i);            c.push_back(j);            c.push_back(i);            c.push_back(j+1);            c.push_back(i+1);            c.push_back(j);            b.push_back(c);            c.clear();            c.push_back(i);            c.push_back(j);            c.push_back(i);            c.push_back(j+1);            c.push_back(i+1);            c.push_back(j+1);            b.push_back(c);        &#125;         void case1(vector&lt;vector&lt;int&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , int i , int j)&#123;            vector&lt;int&gt;c;            if(a[i][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j);                c.push_back(i+1);                c.push_back(j+1);                b.push_back(c);            &#125;            if(a[i][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i+1);                c.push_back(j);                c.push_back(i+1);                c.push_back(j+1);                b.push_back(c);            &#125;            if(a[i+1][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j+1);                b.push_back(c);            &#125;            if(a[i+1][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i+1);                c.push_back(j);                c.push_back(i);                c.push_back(j+1);                b.push_back(c);            &#125;        &#125;         void case2(vector&lt;vector&lt;int&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , int i , int j)&#123;            vector&lt;int&gt;c;            if(a[i][j]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j+1);                b.push_back(c);                a[i][j]&#x3D;a[i][j+1]&#x3D;&#39;0&#39;;                a[i+1][j+1]&#x3D;&#39;1&#39;;            &#125;            if(a[i][j]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i+1][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i+1);                c.push_back(j);                c.push_back(i+1);                c.push_back(j+1);                b.push_back(c);                a[i][j]&#x3D;a[i+1][j]&#x3D;&#39;0&#39;;                a[i+1][j+1]&#x3D;&#39;1&#39;;            &#125;            if(a[i][j]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i+1][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j);                c.push_back(i+1);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j);                b.push_back(c);                a[i][j]&#x3D;a[i+1][j+1]&#x3D;&#39;0&#39;;                a[i+1][j]&#x3D;&#39;1&#39;;            &#125;            if(a[i][j+1]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i+1][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j);                c.push_back(i);                c.push_back(j);                b.push_back(c);                a[i][j+1]&#x3D;a[i+1][j]&#x3D;&#39;0&#39;;                a[i][j]&#x3D;&#39;1&#39;;            &#125;            if(a[i][j+1]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i+1][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i);                c.push_back(j+1);                c.push_back(i+1);                c.push_back(j+1);                c.push_back(i);                c.push_back(j);                b.push_back(c);                a[i][j+1]&#x3D;a[i+1][j+1]&#x3D;&#39;0&#39;;                a[i][j]&#x3D;&#39;1&#39;;            &#125;            if(a[i+1][j]&#x3D;&#x3D;&#39;1&#39; &amp;&amp; a[i+1][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                c.push_back(i+1);                c.push_back(j);                c.push_back(i+1);                c.push_back(j+1);                c.push_back(i);                c.push_back(j);                b.push_back(c);                a[i+1][j]&#x3D;a[i+1][j+1]&#x3D;&#39;0&#39;;                a[i][j]&#x3D;&#39;1&#39;;            &#125;        &#125;         void solve()&#123;            int n,m;            cin&gt;&gt;n&gt;&gt;m;            vector&lt;string&gt;a(n);            for(int i&#x3D;0;i&lt;n;i++)&#123;                cin&gt;&gt;a[i];            &#125;            vector&lt;vector&lt;int&gt;&gt;b;            for(int i&#x3D;0;i&lt;n-1;i++)&#123;                for(int j&#x3D;0;j&lt;m-1;j++)&#123;                    int total&#x3D;0;                    total&#x3D;(a[i][j]-&#39;0&#39;)+(a[i][j+1]-&#39;0&#39;)+(a[i+1][j]-&#39;0&#39;)+(a[i+1][j+1]-&#39;0&#39;);                    if(total&#x3D;&#x3D;0)                        continue;                    else if(total&#x3D;&#x3D;3)&#123;                        vector&lt;int&gt;c;                        if(a[i][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                            a[i][j]&#x3D;&#39;0&#39;;                            c.push_back(i);                            c.push_back(j);                        &#125;                        if(a[i][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                            a[i][j+1]&#x3D;&#39;0&#39;;                            c.push_back(i);                            c.push_back(j+1);                        &#125;                        if(a[i+1][j]&#x3D;&#x3D;&#39;1&#39;)&#123;                            a[i+1][j]&#x3D;&#39;0&#39;;                            c.push_back(i+1);                            c.push_back(j);                        &#125;                        if(a[i+1][j+1]&#x3D;&#x3D;&#39;1&#39;)&#123;                            a[i+1][j+1]&#x3D;&#39;0&#39;;                            c.push_back(i+1);                            c.push_back(j+1);                        &#125;                        b.push_back(c);                    &#125;                    else if(total&#x3D;&#x3D;4)&#123;                        case4(b,a,i,j);                    &#125;                    else if(total&#x3D;&#x3D;1)&#123;                        case1(b,a,i,j);                        case4(b,a,i,j);                    &#125;                    else&#123;                        case2(b,a,i,j);                        case1(b,a,i,j);                        case4(b,a,i,j);                    &#125;                &#125;            &#125;            cout&lt;&lt;(int)b.size()&lt;&lt;&quot;\n&quot;;            for(int i&#x3D;0;i&lt;(int)b.size();i++)&#123;                for(int j&#x3D;0;j&lt;6;j++)                    cout&lt;&lt;b[i][j]+1&lt;&lt;&quot; &quot;;                cout&lt;&lt;&quot;\n&quot;;            &#125;        &#125;         int main()&#123;            int T;            cin&gt;&gt;T;            while(T--)            &#123;                solve();            &#125;            return  0;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS.这个模拟把人写傻了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六届蓝桥杯-JavaA组T.H奇偶覆盖</title>
      <link href="2020/11/72bd2125.html"/>
      <url>2020/11/72bd2125.html</url>
      
        <content type="html"><![CDATA[<p>线段树初步版本，未完善</p><a id="more"></a><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>h<span class="token punctuation">;</span>    bool operator<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> h<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>flag<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">cal</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cal</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>r<span class="token punctuation">,</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>ql<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">cal</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">></span>ql<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>qr<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>r<span class="token punctuation">,</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>all<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>all<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>all<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans<span class="token operator">+=</span>sum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token operator">-</span>e<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>all<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-DFS-Practice</title>
      <link href="2020/11/7a871ff6.html"/>
      <url>2020/11/7a871ff6.html</url>
      
        <content type="html"><![CDATA[<h1 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h1><blockquote><p>给定整数a1,a2…,an,判断是否可以从中选出若干数，使他们的和恰好为k</p></blockquote><a id="more"></a><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">20</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>bool <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> sum <span class="token operator">==</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cin<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lake-Counting-POJ2386"><a href="#Lake-Counting-POJ2386" class="headerlink" title="Lake Counting(POJ2386)"></a>Lake Counting(POJ2386)</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span><span class="token keyword">char</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> dx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dx<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dx<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> dy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dy<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dy<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">,</span> ny<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> nx <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token operator">&lt;=</span>ny <span class="token operator">&amp;&amp;</span> ny<span class="token operator">&lt;</span> M <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'W'</span><span class="token punctuation">)</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'W'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>N<span class="token operator">>></span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-STL-dfs</title>
      <link href="2020/10/3fbdba09.html"/>
      <url>2020/10/3fbdba09.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int book[101],sum,n,e[101][101];void dfs(int cur)&#123;cout&lt;&lt;cur&lt;&lt;&quot; &quot;;sum++;if(sum&#x3D;&#x3D;n)return;for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;if(e[cur][i]&#x3D;&#x3D;1 &amp;&amp; book[i] &#x3D;&#x3D; 0)&#123;book[i]&#x3D;1;dfs(i);&#125;&#125;return;&#125;int main()&#123;int m,a,b;cin&gt;&gt;n&gt;&gt;m;for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;if(i&#x3D;&#x3D;j)e[i][j]&#x3D;0;else e[i][j]&#x3D;99999999;&#125;&#125;for(int i&#x3D;1;i&lt;&#x3D;m;i++)&#123;cin&gt;&gt;a&gt;&gt;b;e[a][b]&#x3D;1;e[b][a]&#x3D;1;&#125;book[1]&#x3D;1;dfs(1);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes-ctf-net-pack(WinShark)</title>
      <link href="2020/10/89cfb270.html"/>
      <url>2020/10/89cfb270.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目：shark-on-wire-1"><a href="#题目：shark-on-wire-1" class="headerlink" title="题目：shark on wire 1"></a>题目：shark on wire 1</h1><pre class="line-numbers language-none"><code class="language-none">DescriptionWe found this packet capture. Recover the flag.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这里懂得了winshark的一些基本用法（感谢wbl学长），例如常见的CTF的杂项的流量包分析，主要内容集中在TCP中进行TCP追踪流（stream）进行分析，bing查找之后发现了另一种常见的流量包拦截嗅探后寻找admin账号密码以获得flag的方法主要在<em>post</em>请求中查找未解密内容，也在这里一并记录。</p><p>然而，本题的流分析却在以上二者中都没有找到，回过头来返回udp包中进行追踪，在流中发现了fake flag和flag，本题得以解决</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之后有必要对TCP/IP协议和UDP，post请求等基本知识熟练掌握，了解加密解密和SSL（学长说的深一层的难度）</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caser-Pass-Tool1-C++</title>
      <link href="2020/10/992fe380.html"/>
      <url>2020/10/992fe380.html</url>
      
        <content type="html"><![CDATA[<p>刷pico遇到一个凯撒密码加密题，顺手写了个解密工具，但是暂时没有解决到边界字母的升降档问题</p><a id="more"></a><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main()&#123;char s[100];int n,k,s2[100];cin&gt;&gt;n&gt;&gt;k;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;s[i];s2[i]&#x3D;(int)s[i];&#125;for(int i&#x3D;0;i&lt;n;i++)&#123;s2[i]+&#x3D;k;cout&lt;&lt;(char)s2[i];&#125;return 0;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>P.S C++大法好</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes-Python-1</title>
      <link href="2020/10/92ae3954.html"/>
      <url>2020/10/92ae3954.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组切割"><a href="#数组切割" class="headerlink" title="数组切割"></a>数组切割</h1><p>数组切割格式[.. : ..] <strong><em>(区间为左闭右开)</em></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习C/C++: 还得这样写？！<br>学习python：还能这样写？！</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF-day1</title>
      <link href="2020/10/fa61788.html"/>
      <url>2020/10/fa61788.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lets-Warm-Up"><a href="#Lets-Warm-Up" class="headerlink" title="Lets Warm Up"></a>Lets Warm Up</h1><p>If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?</p><p>这应该就是签到题了吧？爱了爱了，十六进制转十进制再打表（突然ACM）转ASCII，得到‘p’，按照格式输入即可</p><a id="more"></a><h1 id="The-Numbers"><a href="#The-Numbers" class="headerlink" title="The Numbers"></a>The Numbers</h1><p>下载图片后得到一串数字，根据格式盲猜开头是picoCTF，然后又是一波打表- -，根据这几个字母和他们的数字就硬解出了这道题，拿到了Flag</p><h1 id="2Warm"><a href="#2Warm" class="headerlink" title="2Warm"></a>2Warm</h1><p>进制转换，啊这，这才是签到题吧- -</p><h1 id="Insp3ct0r"><a href="#Insp3ct0r" class="headerlink" title="Insp3ct0r"></a>Insp3ct0r</h1><p>打开网页源代码，找到1/3的Flag，然后观察代码，发现一个css和一个js，可能答案藏在这里，打开之后分别找到第二第三部分，合并即可</p><h1 id="Glory-of-Garden"><a href="#Glory-of-Garden" class="headerlink" title="Glory of Garden"></a>Glory of Garden</h1><p>下载图片，一看就是老套路，第一页题目盲猜不会太深，直接开stegsolve看图片信息，果然找到了flag</p><h1 id="vault-door-training"><a href="#vault-door-training" class="headerlink" title="vault-door-training"></a>vault-door-training</h1><p>题目太长不看，下载java文件打开源码即得flag</p><h1 id="Warmed-UP"><a href="#Warmed-UP" class="headerlink" title="Warmed UP"></a>Warmed UP</h1><p>梅开二度，仿照前面进制转换</p><h1 id="vault-door-1"><a href="#vault-door-1" class="headerlink" title="vault-door-1"></a>vault-door-1</h1><p>本题是前面vault变种，打开源码看应该是一个登录的密码核对的处理机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VaultDoor1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VaultDoor1</span> vaultDoor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VaultDoor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Enter vault password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userInput <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> input <span class="token operator">=</span> userInput<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"picoCTF&#123;"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userInput<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vaultDoor<span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Access granted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Access denied!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// I came up with a more secure way to check the password without putting</span>    <span class="token comment">// the password itself in the source code. I think this is going to be</span>    <span class="token comment">// UNHACKABLE!! I hope Dr. Evil agrees...</span>    <span class="token comment">//</span>    <span class="token comment">// -Minion #8728</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'d'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'r'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'5'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'r'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'c'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'4'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'b'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'4'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'t'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'c'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'l'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'H'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'c'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token string">'m'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'5'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'r'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'4'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'T'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'H'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'b'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'6'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span>               password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是想要破解密码需要一点点技巧（一个一个手动核对实在是太麻烦了- -），感谢lrj学长的精心指导，让我想起了vs code可以对同样的字符片段进行批量操作，把前面的字符全部删除之后，利用python，把==变成：，然后以数字作为key进行sort排序，然后批量提取即可得到flag，这个记录可圈可点</p><h1 id="what’s-a-net-cat"><a href="#what’s-a-net-cat" class="headerlink" title="what’s a net cat?"></a>what’s a net cat?</h1><p>没啥说的，打开Kali，打开终端</p><pre class="line-numbers language-none"><code class="language-none">nc jupiter.challenges.picoctf.org 54271<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag</p><h1 id="Strings-it"><a href="#Strings-it" class="headerlink" title="Strings it"></a>Strings it</h1><p>这个下载下来，hint说的是不用打开，那就是hexo了，打开根据编码搜索‘ctf’无果，更换大小写‘CTF’查找几次之后即找到了flag</p><h1 id="Easy1"><a href="#Easy1" class="headerlink" title="Easy1"></a>Easy1</h1><p>这不就是OI的打表题吗，爱了爱了，根据给的table把他进行解码就可以得到flag</p><h1 id="where-are-the-robots"><a href="#where-are-the-robots" class="headerlink" title="where are the robots"></a>where are the robots</h1><p>打开链接以后，根据题目，应该指的是robot.txt，那就访问robot，又得到一个html，即可得到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>dalao们都说picoCTF的题循序渐进，适合入门，看来确实是这样，今后就在这儿开坑了</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-queue队列</title>
      <link href="2020/10/64d83881.html"/>
      <url>2020/10/64d83881.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>队列的原理基本与站队一样，队首出，队尾入，变化以后也是大同小异，写起来主要就是注意struct的相关知识，以及伪指针（分别指向队首和队尾+1），队尾序号要+1以防首位变量数字重合造成不必要的麻烦（目前也不是很清楚会遇到什么）</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;struct queue&#123;int data[100];int head;int tail;&#125;;int main()&#123;struct queue q;int i;q.head&#x3D;1;q.tail&#x3D;1;for(i&#x3D;1; i&lt;&#x3D;9;i++)&#123;cin&gt;&gt;q.data[q.tail];q.tail++;&#125;while(q.head&lt;q.tail)&#123;cout&lt;&lt;q.data[q.head];q.head++;q.data[q.tail]&#x3D;q.data[q.head];q.tail++;q.head++;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写的过程中主要一开始用万能头和STL里面的queue冲突报错了。。（想了好久），其他没什么，队列作为广搜和Bellman-Ford的最短路核心算法还是很有必要理解并记忆的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-QuickSort</title>
      <link href="2020/10/12aa90f7.html"/>
      <url>2020/10/12aa90f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>快排基本思路应该就是二分+递归，从两侧同时（实则先从右往左）往中间找，同时和参变量对比，发现位置颠倒后交换位置，然后通过二分将其一块一块的分割开，直到分割到一个元素位置，即完成了快排。</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int a[101],n;void quicksort(int left,int right)&#123;int i,j,t,temp;&#x2F;&#x2F;temp存基准数 if(left&gt;right)return;temp&#x3D;a[left];i&#x3D;left;j&#x3D;right;while(i!&#x3D;j)&#123;while(a[j]&gt;&#x3D;temp &amp;&amp; i&lt;j)j--;while(a[i]&lt;&#x3D;temp &amp;&amp; i&lt;j)i++;if(i&lt;j)&#123;t&#x3D;a[i];a[i]&#x3D;a[j];a[j]&#x3D;t;&#125;&#125;a[left]&#x3D;a[i];a[i]&#x3D;temp;quicksort(left, i-1);quicksort(i+1,right);return;&#125;int main()&#123;cin&gt;&gt;n;for(int i&#x3D;1;i&lt;&#x3D;n;i++)cin&gt;&gt;a[i];quicksort(1,n);for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快排应该是最常用的模板了，时间复杂度也比较理想</p><p>PS.致敬一波快排的提出者东尼·霍尔(C. A. R. Hoare)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-misc-10/09</title>
      <link href="2020/10/d61633e9.html"/>
      <url>2020/10/d61633e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-金三胖"><a href="#1-金三胖" class="headerlink" title="1.金三胖"></a>1.金三胖</h1><p>典型入门题目，将GIF图片导入StegSolve，Analyse-&gt;Frame Browser，逐帧查看，将闪过的几张falg内容拼接起来即可</p><a id="more"></a><h1 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h1><p>到手先扫描，告诉我This is a Secret（？？？），然后下意识跟着上一题的思路想到图层扫描，经过几次仔细查看后我确定这个图片并没有什么隐藏的图层。。。然后想起来用老套路，放入Binwalk结果发现了夹在里面的压缩文件，爆破得到压缩文件密码即得Flag</p><h1 id="3-N种方法解决"><a href="#3-N种方法解决" class="headerlink" title="3.N种方法解决"></a>3.N种方法解决</h1><p>解压看到一个exe，放入winhex发现一个压缩文件，打开是图片，详细信息里面有base64特征的一串，解密后即得flag</p><h1 id="4-大白"><a href="#4-大白" class="headerlink" title="4.大白"></a>4.大白</h1><p>放入winhex发现图片高度被修改过，将高度修改回来即得flag</p><h1 id="5-你竟然赶我走"><a href="#5-你竟然赶我走" class="headerlink" title="5.你竟然赶我走"></a>5.你竟然赶我走</h1><p>winhex打开查看编码，在最后可发现flag的ASCII码</p><h1 id="6-基础破解"><a href="#6-基础破解" class="headerlink" title="6.基础破解"></a>6.基础破解</h1><p>梅开二度，爆破密码，得到base64，解密即为FLAG</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/undefined.html"/>
      <url>2020/10/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
